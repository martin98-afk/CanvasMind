{
  "version": "1.0",
  "graph": {
    "graph": {
      "layout_direction": 0,
      "acyclic": true,
      "pipe_collision": false,
      "pipe_slicing": true,
      "pipe_style": 2,
      "accept_connection_types": "{}",
      "reject_connection_types": "{}"
    },
    "nodes": {
      "0x23a0173d930": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_大模型对话",
        "icon": null,
        "name": "大模型对话",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 525.0,
        "height": 452.3,
        "pos": [
          -670.6522729091892,
          1891.2941688118208
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "model": "qwen3-30b-a3b",
          "api_key": "",
          "base_url": "http://168.168.10.110:20000",
          "system_prompt": "你是一个代码编辑专家，能够根据用户的需求生成专业的python代码，除了python代码不要输出任何其他文字。",
          "temperature": 0.3,
          "max_tokens": "20000",
          "model_params": [
            {
              "key": "chat_template_kwargs",
              "value": "{\"enable_thinking\": false}"
            }
          ]
        }
      },
      "0x23a01d8a710": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件意图",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2188.57038571253,
          1543.8975222460185
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "input_text": "我的需求是开发一个大模型智能问题分类组件"
        }
      },
      "0x23a01d8add0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1659.2947521058052,
          1546.1115503163737
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "prop_0": "intention"
        }
      },
      "0x23a62367eb0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_提示词模板",
        "icon": null,
        "name": "提示词模板 3",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 84.80000000000001,
        "pos": [
          -1158.5801054368776,
          1701.0433487869439
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "template": "## 组件开发需求\n{{intention}}\n\n## 组件输入参数\n{{input}}\n\n## 组件输出参数\n{{output}}\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码\n"
        }
      },
      "0x23a017c4b80": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件输入",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2188.2100495625027,
          1709.0080783870553
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "input_text": "输入是用户的问题文本，组件参数是所有问题分类"
        }
      },
      "0x23a017c6bf0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装 1",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1687.4489383568828,
          1708.3496854337
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "prop_0": "input"
        }
      },
      "0x23a017c68c0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装 3",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1651.938369822454,
          1890.4278436681943
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "prop_0": "output"
        }
      },
      "0x23a61e9dc90": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件输出",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2169.14400064492,
          1887.8268959188708
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "input_text": "输出是问题分类结果"
        }
      },
      "0x23a01c81150": {
        "type_": "dynamic.StatusDynamicNode_数据存储_组件保存",
        "icon": null,
        "name": "组件保存",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 160,
        "height": 60,
        "pos": [
          947.1487304459199,
          1888.5409078504013
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          }
        }
      },
      "0x23a01c82830": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_大模型输出解析",
        "icon": null,
        "name": "大模型输出解析",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": true,
        "visible": true,
        "width": 292.0,
        "height": 122.60000000000001,
        "pos": [
          573.7360894813451,
          1888.063894983026
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "strict": true,
          "type": "python"
        }
      },
      "0x23a017f35b0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_移除思考过程",
        "icon": null,
        "name": "移除思考过程",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 455.0,
        "height": 86.9,
        "pos": [
          -7.780470444673426,
          1888.3933897249433
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "remove_empty_lines": true,
          "keep_inner_if_no_outer": true
        }
      },
      "0x23a018f3190": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_构建多轮对话",
        "icon": null,
        "name": "构建多轮对话",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 499.0,
        "height": 375.65000000000003,
        "pos": [
          -1667.3915274262924,
          2147.2856638726194
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "prop1": [
            {
              "role": "user",
              "content": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码"
            },
            {
              "role": "assistant",
              "content": "好的，我会输出完整可运行的python代码"
            },
            {
              "role": "user",
              "content": "下面是组件输入、输出、属性端口定义代码：\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ConnectionType(str, Enum):\n    \"\"\"连接类型\"\"\"\n    SINGLE = \"单输入\"\n    MULTIPLE = \"多输入\"\n\n\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    MULTILINE = \"多行文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    VARIABLE = \"全局变量\"\n    DYNAMICFORM = \"动态表单\"\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"\n    JSON = \"json\"\n    EXCEL = \"excel\"\n    FILE = \"文件\"\n    UPLOAD = \"上传\"\n    SKLEARNMODEL = \"sklearn模型\"\n    TORCHMODEL = \"torch模型\"\n    IMAGE = \"图片\"\n\n    # 验证是否是文件类型\n    def is_file(self):\n        return self in [ArgumentType.FILE, ArgumentType.EXCEL, ArgumentType.SKLEARNMODEL,\n                        ArgumentType.TORCHMODEL, ArgumentType.UPLOAD]\n\n    def is_number(self):\n        return self in [ArgumentType.INT, ArgumentType.FLOAT]\n\n    def is_array(self):\n        return self in [ArgumentType.ARRAY]\n\n    def is_bool(self):\n        return self == ArgumentType.BOOL\n\n    def is_image(self):\n        return self == ArgumentType.IMAGE\n\n    def serialize(self, display_data):\n        if display_data is None or len(display_data) == 0:\n            return display_data\n        try:\n            if self.is_file() and len(display_data) > 0:\n                # FILE类型：显示文件路径选择\n                display_data = {\n                    \"file_name\": os.path.basename(display_data),\n                    \"file_type\": self.value,\n                    \"file_path\": display_data\n                }\n            elif self == ArgumentType.JSON and isinstance(display_data, str):\n                display_data = json.loads(display_data)\n            elif self.is_number():\n                display_data = float(display_data)\n            elif self.is_bool():\n                display_data = bool(display_data)\n            elif self.is_array() and isinstance(display_data, str):\n                display_data = np.array(eval(display_data))\n            elif self.is_array() and isinstance(display_data, list):\n                display_data = np.array(display_data)\n            elif self.is_image():\n                display_data = Image.open(display_data)\n        except:\n            logger.error(f\"{self.value}序列化错误：{display_data}\")\n\n        return display_data\n\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n    connection: ConnectionType = ConnectionType.SINGLE"
            },
            {
              "role": "assistant",
              "content": "好的，我已经了解了组件节点构成，我不会在生成的代码里包含该代码定义。"
            },
            {
              "role": "user",
              "content": "以下是组件的样例代码，仅供参考，所有的工具包导入均写在函数内：\nclass Component(BaseComponent):\n    name = \"构建多轮对话\"\n    category = \"大模型组件\"\n    description = \"用于构建符合大模型输入格式的多轮对话消息列表，支持追加新消息。\"\n    requirements = \"无特殊依赖，输出为标准 JSON 格式的对话列表。\"\n\n    inputs = [\n        PortDefinition(name=\"history\", label=\"输入1\", type=ArgumentType.JSON, connection=ConnectionType.SINGLE),\n    ]\n\n    outputs = [\n        PortDefinition(name=\"output1\", label=\"输出1\", type=ArgumentType.JSON),\n    ]\n\n    properties = {\n        \"prop1\": PropertyDefinition(\n            type=PropertyType.DYNAMICFORM,\n            label=\"新增消息\",\n            schema={\n                \"role\": {\n                    \"type\": PropertyType.CHOICE.value,\n                    \"default\": \"user\",\n                    \"label\": \"角色\",\n                    \"choices\": [\"system\", \"user\", \"assistant\"]\n                },\n                \"content\": {\n                    \"type\": PropertyType.LONGTEXT.value,\n                    \"default\": \"\",\n                    \"label\": \"内容\",\n                },\n            }\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        \"\"\"\n        params: 节点属性（来自UI）\n        inputs: 上游输入（key=输入端口名）\n        return: 输出数据（key=输出端口名）\n        \"\"\"\n        # 获取历史对话（如果有的话）\n        history = inputs.get(\"history\") if inputs else None\n        if history is None:\n            history = []\n\n        # 验证 history 是否为 list\n        if not isinstance(history, list):\n            history = []\n        self.logger.info(params.prop1)\n\n        # 获取用户配置的新消息\n        messages = history + [\n            {\n                \"role\": message.role,\n                \"content\": message.content\n            } for message in params.prop1\n        ]\n\n        # 返回符合大模型输入格式的对话列表\n        return {\n            \"output1\": messages  # 注意：必须与 outputs 中的 name 一致\n        }\n"
            },
            {
              "role": "assistant",
              "content": "好的，我已经了解了组件代码结构。"
            }
          ]
        }
      },
      "0x23a018f1000": {
        "type_": "dynamic.StatusDynamicNode_数据集成_获取全局变量",
        "icon": null,
        "name": "获取全局变量",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 372.0,
        "height": 94.25,
        "pos": [
          -771.6711397300485,
          2575.3300416613065
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {
              "大模型对话 response": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
            }
          },
          "prop1": ""
        }
      },
      "0x23a01a12b30": {
        "type_": "dynamic.StatusDynamicNode_测试组件_添加字符串",
        "icon": null,
        "name": "添加字符串",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 382.0,
        "height": 94.25,
        "pos": [
          -1208.4088923345153,
          2740.216372807111
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "prop1": "custom.model_name"
        }
      },
      "0x23a01a11e70": {
        "type_": "dynamic.StatusDynamicNode_数据集成_文本输入",
        "icon": null,
        "name": "文本输入",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 248.60000000000002,
        "pos": [
          -1893.637382710042,
          2706.5835434544424
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "input": "文本内容"
        }
      },
      "0x23a01c27400": {
        "type_": "control_flow.ControlFlowInputPort",
        "icon": null,
        "name": "输入端口",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 153.0,
        "height": 60,
        "pos": [
          -1411.4088923345153,
          2757.341372807111
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {}
        }
      },
      "0x23a01c275b0": {
        "type_": "control_flow.ControlFlowOutputPort",
        "icon": null,
        "name": "输出端口",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 153.0,
        "height": 60,
        "pos": [
          -776.4088923345151,
          2757.341372807111
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {}
        }
      },
      "0x23a01c27760": {
        "type_": "control_flow.ControlFlowIterateNode",
        "icon": null,
        "name": "迭代控制流区域",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 868.0,
        "height": 174.25,
        "pos": [
          -1451.4088923345153,
          2700.216372807111
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "backdrop_text": "",
          "current_index": 4,
          "loop_nums": 4,
          "max_iterations": 1000
        }
      },
      "0x23a01c27be0": {
        "type_": "dynamic.StatusDynamicNode_测试组件_逻辑判断",
        "icon": null,
        "name": "逻辑判断",
        "color": [
          80,
          30,
          30,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 648.0,
        "height": 260.15,
        "pos": [
          -1158.4010831485125,
          2920.879281294071
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "conditions": [
            {
              "取反": "/",
              "变量": "custom.model_name",
              "操作符": "==",
              "常量": "$custom_model_name$"
            },
            {
              "取反": "/",
              "变量": "env.LANG",
              "操作符": ">",
              "常量": "0"
            }
          ],
          "组合方式": "and",
          "整体取反": false
        }
      },
      "0x23a01c25cf0": {
        "type_": "dynamic.StatusDynamicNode_数据集成_文本输入",
        "icon": null,
        "name": "文本输入 1",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 373.0,
        "height": 248.60000000000002,
        "pos": [
          -2179.119711823359,
          2287.7068123176737
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "input": "$ len(custom.model_name) > 1$"
        }
      },
      "0x23a019c6680": {
        "type_": "dynamic.StatusDynamicNode_数据集成_文本输入",
        "icon": null,
        "name": "文本输入 2",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 373.0,
        "height": 248.60000000000002,
        "pos": [
          -2665.686634268086,
          3161.14582500845
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "input": "测试1的伟大伟大·"
        }
      },
      "0x23a019c7130": {
        "type_": "dynamic.StatusDynamicNode_测试组件_逻辑判断",
        "icon": null,
        "name": "逻辑判断 1",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 648.0,
        "height": 211.85,
        "pos": [
          -795.5886163108859,
          3644.7072768705143
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {},
          "conditions": [
            {
              "取反": "/",
              "变量": "无",
              "操作符": ">",
              "常量": ""
            }
          ],
          "组合方式": "and",
          "整体取反": false
        }
      },
      "0x23a01616e90": {
        "type_": "dynamic.StatusDynamicNode_数据集成_文本输入",
        "icon": null,
        "name": "文本输入 3",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 373.0,
        "height": 248.60000000000002,
        "pos": [
          -1329.145659707924,
          3633.314599787304
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "input": "文本内容"
        }
      },
      "0x23a01615e10": {
        "type_": "dynamic.StatusDynamicNode_测试组件_逻辑判断",
        "icon": null,
        "name": "逻辑判断 2",
        "color": [
          80,
          30,
          30,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 648.0,
        "height": 211.85,
        "pos": [
          -775.5831423073042,
          3915.4246226725145
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "conditions": [
            {
              "取反": "/",
              "变量": "$len(input.var1)$",
              "操作符": ">",
              "常量": "1"
            }
          ],
          "组合方式": "and",
          "整体取反": false
        }
      },
      "0x23a652fe6b0": {
        "type_": "dynamic.StatusDynamicNode_测试组件_逻辑判断",
        "icon": null,
        "name": "逻辑判断 3",
        "color": [
          80,
          30,
          30,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 648.0,
        "height": 211.85,
        "pos": [
          -756.4621903338912,
          4170.065851390966
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "conditions": [
            {
              "取反": "/",
              "变量": "$len(input.var1)$",
              "操作符": ">",
              "常量": "1"
            }
          ],
          "组合方式": "and",
          "整体取反": false
        }
      },
      "0x23a652fe3e0": {
        "type_": "dynamic.StatusDynamicNode_测试组件_逻辑判断",
        "icon": null,
        "name": "逻辑判断 4",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": true,
        "visible": true,
        "width": 648.0,
        "height": 211.85,
        "pos": [
          -804.6948506170454,
          4453.45870647364
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "conditions": [
            {
              "取反": "/",
              "变量": "$input.var1$",
              "操作符": "==",
              "常量": "文本内容"
            }
          ],
          "组合方式": "and",
          "整体取反": false
        }
      },
      "0x23a016b3a30": {
        "type_": "control_flow.ControlFlowBranchNode",
        "icon": null,
        "name": "条件分支",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 501.0,
        "height": 269.6,
        "pos": [
          -78.7694909127195,
          4454.480931532621
        ],
        "layout_direction": 0,
        "port_deletion_allowed": true,
        "subgraph_session": {},
        "input_ports": [
          {
            "name": "input",
            "multi_connection": false,
            "display_name": true
          }
        ],
        "output_ports": [
          {
            "name": "branch1",
            "multi_connection": true,
            "display_name": true
          },
          {
            "name": "branch",
            "multi_connection": true,
            "display_name": true
          },
          {
            "name": "branch_1",
            "multi_connection": true,
            "display_name": true
          },
          {
            "name": "branch_2",
            "multi_connection": true,
            "display_name": true
          },
          {
            "name": "else",
            "multi_connection": true,
            "display_name": true
          }
        ],
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "fets": {
                "value": "rfew",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {}
          },
          "conditions": [
            {
              "expr": "True",
              "name": "branch1"
            },
            {
              "expr": "",
              "name": "branch"
            },
            {
              "expr": "",
              "name": "branch"
            },
            {
              "expr": "",
              "name": "branch"
            }
          ],
          "enable_else": true
        }
      }
    },
    "connections": [
      {
        "in": [
          "0x23a0173d930",
          "user_input"
        ],
        "out": [
          "0x23a62367eb0",
          "prompt"
        ]
      },
      {
        "in": [
          "0x23a0173d930",
          "history"
        ],
        "out": [
          "0x23a018f3190",
          "output1"
        ]
      },
      {
        "out": [
          "0x23a0173d930",
          "response"
        ],
        "in": [
          "0x23a017f35b0",
          "raw_text"
        ]
      },
      {
        "out": [
          "0x23a01d8a710",
          "output"
        ],
        "in": [
          "0x23a01d8add0",
          "input1"
        ]
      },
      {
        "out": [
          "0x23a01d8add0",
          "output1"
        ],
        "in": [
          "0x23a62367eb0",
          "variables"
        ]
      },
      {
        "in": [
          "0x23a62367eb0",
          "variables"
        ],
        "out": [
          "0x23a017c6bf0",
          "output1"
        ]
      },
      {
        "in": [
          "0x23a62367eb0",
          "variables"
        ],
        "out": [
          "0x23a017c68c0",
          "output1"
        ]
      },
      {
        "out": [
          "0x23a017c4b80",
          "output"
        ],
        "in": [
          "0x23a017c6bf0",
          "input1"
        ]
      },
      {
        "in": [
          "0x23a017c68c0",
          "input1"
        ],
        "out": [
          "0x23a61e9dc90",
          "output"
        ]
      },
      {
        "in": [
          "0x23a01c81150",
          "text"
        ],
        "out": [
          "0x23a01c82830",
          "parsed_json"
        ]
      },
      {
        "in": [
          "0x23a01c82830",
          "llm_output"
        ],
        "out": [
          "0x23a017f35b0",
          "cleaned_text"
        ]
      },
      {
        "in": [
          "0x23a01a12b30",
          "input1"
        ],
        "out": [
          "0x23a01c27400",
          "output"
        ]
      },
      {
        "out": [
          "0x23a01a12b30",
          "output1"
        ],
        "in": [
          "0x23a01c275b0",
          "input"
        ]
      },
      {
        "out": [
          "0x23a01a11e70",
          "text"
        ],
        "in": [
          "0x23a01c27760",
          "inputs"
        ]
      },
      {
        "in": [
          "0x23a019c7130",
          "var1"
        ],
        "out": [
          "0x23a01616e90",
          "text"
        ]
      },
      {
        "out": [
          "0x23a01616e90",
          "text"
        ],
        "in": [
          "0x23a01615e10",
          "var1"
        ]
      },
      {
        "out": [
          "0x23a01616e90",
          "text"
        ],
        "in": [
          "0x23a652fe6b0",
          "var1"
        ]
      },
      {
        "out": [
          "0x23a01616e90",
          "text"
        ],
        "in": [
          "0x23a652fe3e0",
          "var1"
        ]
      },
      {
        "out": [
          "0x23a652fe3e0",
          "output"
        ],
        "in": [
          "0x23a016b3a30",
          "input"
        ]
      }
    ]
  },
  "runtime": {
    "environment": "3.11",
    "environment_exe": "D:\\work\\WorkFlowGUI\\envs\\miniconda\\envs\\3.11\\python.exe",
    "node_id2stable_key": {
      "0x23a0173d930": "大模型组件/大模型对话||大模型对话",
      "0x23a01d8a710": "数据集成/长文本输入||组件意图",
      "0x23a01d8add0": "大模型组件/JSON文本包装||JSON文本包装",
      "0x23a62367eb0": "大模型组件/提示词模板||提示词模板 3",
      "0x23a017c4b80": "数据集成/长文本输入||组件输入",
      "0x23a017c6bf0": "大模型组件/JSON文本包装||JSON文本包装 1",
      "0x23a017c68c0": "大模型组件/JSON文本包装||JSON文本包装 3",
      "0x23a61e9dc90": "数据集成/长文本输入||组件输出",
      "0x23a01c81150": "数据存储/组件保存||组件保存",
      "0x23a01c82830": "大模型组件/大模型输出解析||大模型输出解析",
      "0x23a017f35b0": "大模型组件/移除思考过程||移除思考过程",
      "0x23a018f3190": "大模型组件/构建多轮对话||构建多轮对话",
      "0x23a018f1000": "数据集成/获取全局变量||获取全局变量",
      "0x23a01a12b30": "测试组件/添加字符串||添加字符串",
      "0x23a01a11e70": "数据集成/文本输入||文本输入",
      "0x23a01c27400": "控制流/输入端口||输入端口",
      "0x23a01c275b0": "控制流/输出端口||输出端口",
      "0x23a01c27be0": "测试组件/逻辑判断||逻辑判断",
      "0x23a01c25cf0": "数据集成/文本输入||文本输入 1",
      "0x23a019c6680": "数据集成/文本输入||文本输入 2",
      "0x23a019c7130": "测试组件/逻辑判断||逻辑判断 1",
      "0x23a01616e90": "数据集成/文本输入||文本输入 3",
      "0x23a01615e10": "测试组件/逻辑判断||逻辑判断 2",
      "0x23a652fe6b0": "测试组件/逻辑判断||逻辑判断 3",
      "0x23a652fe3e0": "测试组件/逻辑判断||逻辑判断 4",
      "0x23a016b3a30": "unknown||条件分支"
    },
    "node_states": {
      "大模型组件/大模型对话||大模型对话": "success",
      "数据集成/长文本输入||组件意图": "success",
      "大模型组件/JSON文本包装||JSON文本包装": "success",
      "大模型组件/提示词模板||提示词模板 3": "success",
      "数据集成/长文本输入||组件输入": "success",
      "大模型组件/JSON文本包装||JSON文本包装 1": "success",
      "大模型组件/JSON文本包装||JSON文本包装 3": "success",
      "数据集成/长文本输入||组件输出": "success",
      "数据存储/组件保存||组件保存": "success",
      "大模型组件/大模型输出解析||大模型输出解析": "success",
      "大模型组件/移除思考过程||移除思考过程": "success",
      "大模型组件/构建多轮对话||构建多轮对话": "success",
      "数据集成/获取全局变量||获取全局变量": "success",
      "测试组件/添加字符串||添加字符串": "success",
      "数据集成/文本输入||文本输入": "success",
      "控制流/输入端口||输入端口": "unrun",
      "控制流/输出端口||输出端口": "unrun",
      "测试组件/逻辑判断||逻辑判断": "failed",
      "数据集成/文本输入||文本输入 1": "success",
      "数据集成/文本输入||文本输入 2": "success",
      "测试组件/逻辑判断||逻辑判断 1": "unrun",
      "数据集成/文本输入||文本输入 3": "success",
      "测试组件/逻辑判断||逻辑判断 2": "failed",
      "测试组件/逻辑判断||逻辑判断 3": "failed",
      "测试组件/逻辑判断||逻辑判断 4": "success",
      "unknown||条件分支": "unrun"
    },
    "node_inputs": {
      "大模型组件/大模型对话||大模型对话": {},
      "数据集成/长文本输入||组件意图": {},
      "大模型组件/JSON文本包装||JSON文本包装": {},
      "大模型组件/提示词模板||提示词模板 3": {},
      "数据集成/长文本输入||组件输入": {},
      "大模型组件/JSON文本包装||JSON文本包装 1": {},
      "大模型组件/JSON文本包装||JSON文本包装 3": {},
      "数据集成/长文本输入||组件输出": {},
      "数据存储/组件保存||组件保存": {},
      "大模型组件/大模型输出解析||大模型输出解析": {},
      "大模型组件/移除思考过程||移除思考过程": {},
      "大模型组件/构建多轮对话||构建多轮对话": {},
      "数据集成/获取全局变量||获取全局变量": {},
      "测试组件/添加字符串||添加字符串": {},
      "数据集成/文本输入||文本输入": {},
      "控制流/输入端口||输入端口": {},
      "控制流/输出端口||输出端口": {},
      "测试组件/逻辑判断||逻辑判断": {},
      "数据集成/文本输入||文本输入 1": {},
      "数据集成/文本输入||文本输入 2": {},
      "测试组件/逻辑判断||逻辑判断 1": {},
      "数据集成/文本输入||文本输入 3": {},
      "测试组件/逻辑判断||逻辑判断 2": {},
      "测试组件/逻辑判断||逻辑判断 3": {},
      "测试组件/逻辑判断||逻辑判断 4": {},
      "unknown||条件分支": {}
    },
    "node_outputs": {
      "大模型组件/大模型对话||大模型对话": {
        "response": "class Component(BaseComponent):\n    name = \"大模型问题分类\"\n    category = \"大模型组件\"\n    description = \"用于对用户问题进行分类，根据预定义的分类标签进行判断\"\n    requirements = \"无特殊依赖，输出为标准 JSON 格式的分类结果。\"\n\n    inputs = [\n        PortDefinition(name=\"input1\", label=\"输入1\", type=ArgumentType.TEXT, connection=ConnectionType.SINGLE),\n    ]\n\n    outputs = [\n        PortDefinition(name=\"output1\", label=\"输出1\", type=ArgumentType.CHOICE),\n    ]\n\n    properties = {\n        \"prop1\": PropertyDefinition(\n            type=PropertyType.CHOICE.value,\n            label=\"分类标签\",\n            choices=[\"技术问题\", \"业务咨询\", \"系统错误\", \"功能请求\", \"其他\"],\n            default=\"其他\",\n            description=\"选择问题分类标签\"\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        \"\"\"\n        params: 节点属性（来自UI）\n        inputs: 上游输入（key=输入端口名）\n        return: 输出数据（key=输出端口名）\n        \"\"\"\n        # 导入第三方工具包\n        from sklearn.feature_extraction.text import TfidfVectorizer\n        from sklearn.naive_bayes import MultinomialNB\n        \n        # 获取用户输入的问题\n        user_input = inputs.get(\"input1\") if inputs else \"\"\n        \n        # 定义训练数据（示例数据，实际应用中应使用真实数据）\n        X_train = [\n            \"如何安装Python？\",\n            \"我的电脑无法启动。\",\n            \"请帮我创建一个新账户。\",\n            \"这个功能怎么使用？\",\n            \"系统提示错误代码500。\",\n            \"我想添加一个新功能。\",\n            \"如何更新软件？\",\n            \"无法连接到服务器。\",\n            \"请解释一下这个算法。\",\n            \"我的订单状态是什么？\"\n        ]\n        y_train = [\n            \"技术问题\", \"系统错误\", \"业务咨询\", \"功能请求\", \"系统错误\", \n            \"功能请求\", \"技术问题\", \"系统错误\", \"技术问题\", \"业务咨询\"\n        ]\n        \n        # 特征提取\n        vectorizer = TfidfVectorizer()\n        X_train_tfidf = vectorizer.fit_transform(X_train)\n        \n        # 训练分类器\n        clf = MultinomialNB()\n        clf.fit(X_train_tfidf, y_train)\n        \n        # 预处理用户输入\n        user_input_tfidf = vectorizer.transform([user_input])\n        \n        # 进行预测\n        prediction = clf.predict(user_input_tfidf)[0]\n        \n        # 返回分类结果\n        return {\n            \"output1\": prediction  # 注意：必须与 outputs 中的 name 一致\n        }",
        "raw_output": {
          "id": "chatcmpl-35979a6cdd184fe59c08385b9ad4e68f",
          "choices": [
            {
              "finish_reason": "stop",
              "index": 0,
              "logprobs": null,
              "message": {
                "content": "class Component(BaseComponent):\n    name = \"大模型问题分类\"\n    category = \"大模型组件\"\n    description = \"用于对用户问题进行分类，根据预定义的分类标签进行判断\"\n    requirements = \"无特殊依赖，输出为标准 JSON 格式的分类结果。\"\n\n    inputs = [\n        PortDefinition(name=\"input1\", label=\"输入1\", type=ArgumentType.TEXT, connection=ConnectionType.SINGLE),\n    ]\n\n    outputs = [\n        PortDefinition(name=\"output1\", label=\"输出1\", type=ArgumentType.CHOICE),\n    ]\n\n    properties = {\n        \"prop1\": PropertyDefinition(\n            type=PropertyType.CHOICE.value,\n            label=\"分类标签\",\n            choices=[\"技术问题\", \"业务咨询\", \"系统错误\", \"功能请求\", \"其他\"],\n            default=\"其他\",\n            description=\"选择问题分类标签\"\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        \"\"\"\n        params: 节点属性（来自UI）\n        inputs: 上游输入（key=输入端口名）\n        return: 输出数据（key=输出端口名）\n        \"\"\"\n        # 导入第三方工具包\n        from sklearn.feature_extraction.text import TfidfVectorizer\n        from sklearn.naive_bayes import MultinomialNB\n        \n        # 获取用户输入的问题\n        user_input = inputs.get(\"input1\") if inputs else \"\"\n        \n        # 定义训练数据（示例数据，实际应用中应使用真实数据）\n        X_train = [\n            \"如何安装Python？\",\n            \"我的电脑无法启动。\",\n            \"请帮我创建一个新账户。\",\n            \"这个功能怎么使用？\",\n            \"系统提示错误代码500。\",\n            \"我想添加一个新功能。\",\n            \"如何更新软件？\",\n            \"无法连接到服务器。\",\n            \"请解释一下这个算法。\",\n            \"我的订单状态是什么？\"\n        ]\n        y_train = [\n            \"技术问题\", \"系统错误\", \"业务咨询\", \"功能请求\", \"系统错误\", \n            \"功能请求\", \"技术问题\", \"系统错误\", \"技术问题\", \"业务咨询\"\n        ]\n        \n        # 特征提取\n        vectorizer = TfidfVectorizer()\n        X_train_tfidf = vectorizer.fit_transform(X_train)\n        \n        # 训练分类器\n        clf = MultinomialNB()\n        clf.fit(X_train_tfidf, y_train)\n        \n        # 预处理用户输入\n        user_input_tfidf = vectorizer.transform([user_input])\n        \n        # 进行预测\n        prediction = clf.predict(user_input_tfidf)[0]\n        \n        # 返回分类结果\n        return {\n            \"output1\": prediction  # 注意：必须与 outputs 中的 name 一致\n        }",
                "refusal": null,
                "role": "assistant",
                "annotations": null,
                "audio": null,
                "function_call": null,
                "tool_calls": [],
                "reasoning_content": null
              },
              "stop_reason": null,
              "token_ids": null
            }
          ],
          "created": 1760522802,
          "model": "qwen3-30b-a3b",
          "object": "chat.completion",
          "service_tier": null,
          "system_fingerprint": null,
          "usage": {
            "completion_tokens": 585,
            "prompt_tokens": 1508,
            "total_tokens": 2093,
            "completion_tokens_details": null,
            "prompt_tokens_details": null
          },
          "prompt_logprobs": null,
          "prompt_token_ids": null,
          "kv_transfer_params": null
        },
        "history": [
          {
            "role": "user",
            "content": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码"
          },
          {
            "role": "assistant",
            "content": "好的，我会输出完整可运行的python代码"
          },
          {
            "role": "user",
            "content": "下面是组件输入、输出、属性端口定义代码：\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ConnectionType(str, Enum):\n    \"\"\"连接类型\"\"\"\n    SINGLE = \"单输入\"\n    MULTIPLE = \"多输入\"\n\n\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    MULTILINE = \"多行文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    VARIABLE = \"全局变量\"\n    DYNAMICFORM = \"动态表单\"\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"\n    JSON = \"json\"\n    EXCEL = \"excel\"\n    FILE = \"文件\"\n    UPLOAD = \"上传\"\n    SKLEARNMODEL = \"sklearn模型\"\n    TORCHMODEL = \"torch模型\"\n    IMAGE = \"图片\"\n\n    # 验证是否是文件类型\n    def is_file(self):\n        return self in [ArgumentType.FILE, ArgumentType.EXCEL, ArgumentType.SKLEARNMODEL,\n                        ArgumentType.TORCHMODEL, ArgumentType.UPLOAD]\n\n    def is_number(self):\n        return self in [ArgumentType.INT, ArgumentType.FLOAT]\n\n    def is_array(self):\n        return self in [ArgumentType.ARRAY]\n\n    def is_bool(self):\n        return self == ArgumentType.BOOL\n\n    def is_image(self):\n        return self == ArgumentType.IMAGE\n\n    def serialize(self, display_data):\n        if display_data is None or len(display_data) == 0:\n            return display_data\n        try:\n            if self.is_file() and len(display_data) > 0:\n                # FILE类型：显示文件路径选择\n                display_data = {\n                    \"file_name\": os.path.basename(display_data),\n                    \"file_type\": self.value,\n                    \"file_path\": display_data\n                }\n            elif self == ArgumentType.JSON and isinstance(display_data, str):\n                display_data = json.loads(display_data)\n            elif self.is_number():\n                display_data = float(display_data)\n            elif self.is_bool():\n                display_data = bool(display_data)\n            elif self.is_array() and isinstance(display_data, str):\n                display_data = np.array(eval(display_data))\n            elif self.is_array() and isinstance(display_data, list):\n                display_data = np.array(display_data)\n            elif self.is_image():\n                display_data = Image.open(display_data)\n        except:\n            logger.error(f\"{self.value}序列化错误：{display_data}\")\n\n        return display_data\n\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n    connection: ConnectionType = ConnectionType.SINGLE"
          },
          {
            "role": "assistant",
            "content": "好的，我已经了解了组件节点构成，我不会在生成的代码里包含该代码定义。"
          },
          {
            "role": "user",
            "content": "以下是组件的样例代码，仅供参考，所有的工具包导入均写在函数内：\nclass Component(BaseComponent):\n    name = \"构建多轮对话\"\n    category = \"大模型组件\"\n    description = \"用于构建符合大模型输入格式的多轮对话消息列表，支持追加新消息。\"\n    requirements = \"无特殊依赖，输出为标准 JSON 格式的对话列表。\"\n\n    inputs = [\n        PortDefinition(name=\"history\", label=\"输入1\", type=ArgumentType.JSON, connection=ConnectionType.SINGLE),\n    ]\n\n    outputs = [\n        PortDefinition(name=\"output1\", label=\"输出1\", type=ArgumentType.JSON),\n    ]\n\n    properties = {\n        \"prop1\": PropertyDefinition(\n            type=PropertyType.DYNAMICFORM,\n            label=\"新增消息\",\n            schema={\n                \"role\": {\n                    \"type\": PropertyType.CHOICE.value,\n                    \"default\": \"user\",\n                    \"label\": \"角色\",\n                    \"choices\": [\"system\", \"user\", \"assistant\"]\n                },\n                \"content\": {\n                    \"type\": PropertyType.LONGTEXT.value,\n                    \"default\": \"\",\n                    \"label\": \"内容\",\n                },\n            }\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        \"\"\"\n        params: 节点属性（来自UI）\n        inputs: 上游输入（key=输入端口名）\n        return: 输出数据（key=输出端口名）\n        \"\"\"\n        # 获取历史对话（如果有的话）\n        history = inputs.get(\"history\") if inputs else None\n        if history is None:\n            history = []\n\n        # 验证 history 是否为 list\n        if not isinstance(history, list):\n            history = []\n        self.logger.info(params.prop1)\n\n        # 获取用户配置的新消息\n        messages = history + [\n            {\n                \"role\": message.role,\n                \"content\": message.content\n            } for message in params.prop1\n        ]\n\n        # 返回符合大模型输入格式的对话列表\n        return {\n            \"output1\": messages  # 注意：必须与 outputs 中的 name 一致\n        }\n"
          },
          {
            "role": "assistant",
            "content": "好的，我已经了解了组件代码结构。"
          },
          {
            "role": "user",
            "content": "## 组件开发需求\n我的需求是开发一个大模型智能问题分类组件\n\n## 组件输入参数\n输入是用户的问题文本，组件参数是所有问题分类\n\n## 组件输出参数\n输出是问题分类结果\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码"
          },
          {
            "role": "assistant",
            "content": "class Component(BaseComponent):\n    name = \"大模型问题分类\"\n    category = \"大模型组件\"\n    description = \"用于对用户问题进行分类，根据预定义的分类标签进行判断\"\n    requirements = \"无特殊依赖，输出为标准 JSON 格式的分类结果。\"\n\n    inputs = [\n        PortDefinition(name=\"input1\", label=\"输入1\", type=ArgumentType.TEXT, connection=ConnectionType.SINGLE),\n    ]\n\n    outputs = [\n        PortDefinition(name=\"output1\", label=\"输出1\", type=ArgumentType.CHOICE),\n    ]\n\n    properties = {\n        \"prop1\": PropertyDefinition(\n            type=PropertyType.CHOICE.value,\n            label=\"分类标签\",\n            choices=[\"技术问题\", \"业务咨询\", \"系统错误\", \"功能请求\", \"其他\"],\n            default=\"其他\",\n            description=\"选择问题分类标签\"\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        \"\"\"\n        params: 节点属性（来自UI）\n        inputs: 上游输入（key=输入端口名）\n        return: 输出数据（key=输出端口名）\n        \"\"\"\n        # 导入第三方工具包\n        from sklearn.feature_extraction.text import TfidfVectorizer\n        from sklearn.naive_bayes import MultinomialNB\n        \n        # 获取用户输入的问题\n        user_input = inputs.get(\"input1\") if inputs else \"\"\n        \n        # 定义训练数据（示例数据，实际应用中应使用真实数据）\n        X_train = [\n            \"如何安装Python？\",\n            \"我的电脑无法启动。\",\n            \"请帮我创建一个新账户。\",\n            \"这个功能怎么使用？\",\n            \"系统提示错误代码500。\",\n            \"我想添加一个新功能。\",\n            \"如何更新软件？\",\n            \"无法连接到服务器。\",\n            \"请解释一下这个算法。\",\n            \"我的订单状态是什么？\"\n        ]\n        y_train = [\n            \"技术问题\", \"系统错误\", \"业务咨询\", \"功能请求\", \"系统错误\", \n            \"功能请求\", \"技术问题\", \"系统错误\", \"技术问题\", \"业务咨询\"\n        ]\n        \n        # 特征提取\n        vectorizer = TfidfVectorizer()\n        X_train_tfidf = vectorizer.fit_transform(X_train)\n        \n        # 训练分类器\n        clf = MultinomialNB()\n        clf.fit(X_train_tfidf, y_train)\n        \n        # 预处理用户输入\n        user_input_tfidf = vectorizer.transform([user_input])\n        \n        # 进行预测\n        prediction = clf.predict(user_input_tfidf)[0]\n        \n        # 返回分类结果\n        return {\n            \"output1\": prediction  # 注意：必须与 outputs 中的 name 一致\n        }"
          }
        ]
      },
      "数据集成/长文本输入||组件意图": {
        "output": "我的需求是开发一个大模型智能问题分类组件"
      },
      "大模型组件/JSON文本包装||JSON文本包装": {
        "output1": {
          "intention": "我的需求是开发一个大模型智能问题分类组件"
        }
      },
      "大模型组件/提示词模板||提示词模板 3": {
        "prompt": "## 组件开发需求\n我的需求是开发一个大模型智能问题分类组件\n\n## 组件输入参数\n输入是用户的问题文本，组件参数是所有问题分类\n\n## 组件输出参数\n输出是问题分类结果\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码\n"
      },
      "数据集成/长文本输入||组件输入": {
        "output": "输入是用户的问题文本，组件参数是所有问题分类"
      },
      "大模型组件/JSON文本包装||JSON文本包装 1": {
        "output1": {
          "input": "输入是用户的问题文本，组件参数是所有问题分类"
        }
      },
      "大模型组件/JSON文本包装||JSON文本包装 3": {
        "output1": {
          "output": "输出是问题分类结果"
        }
      },
      "数据集成/长文本输入||组件输出": {
        "output": "输出是问题分类结果"
      },
      "数据存储/组件保存||组件保存": {
        "file_path": "D:\\work\\WorkFlowGUI\\app\\components\\generated\\generated_a6a150e6-4453-4695-802b-fe36d5285254.py"
      },
      "大模型组件/大模型输出解析||大模型输出解析": {
        "parsed_json": "class Component(BaseComponent):\n    name = \"大模型问题分类\"\n    category = \"大模型组件\"\n    description = \"用于对用户问题进行分类，根据预定义的分类标签进行判断\"\n    requirements = \"无特殊依赖，输出为标准 JSON 格式的分类结果。\"\n\n    inputs = [\n        PortDefinition(name=\"input1\", label=\"输入1\", type=ArgumentType.TEXT, connection=ConnectionType.SINGLE),\n    ]\n\n    outputs = [\n        PortDefinition(name=\"output1\", label=\"输出1\", type=ArgumentType.CHOICE),\n    ]\n\n    properties = {\n        \"prop1\": PropertyDefinition(\n            type=PropertyType.CHOICE.value,\n            label=\"分类标签\",\n            choices=[\"技术问题\", \"业务咨询\", \"系统错误\", \"功能请求\", \"其他\"],\n            default=\"其他\",\n            description=\"选择问题分类标签\"\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        \"\"\"\n        params: 节点属性（来自UI）\n        inputs: 上游输入（key=输入端口名）\n        return: 输出数据（key=输出端口名）\n        \"\"\"\n        # 导入第三方工具包\n        from sklearn.feature_extraction.text import TfidfVectorizer\n        from sklearn.naive_bayes import MultinomialNB\n        \n        # 获取用户输入的问题\n        user_input = inputs.get(\"input1\") if inputs else \"\"\n        \n        # 定义训练数据（示例数据，实际应用中应使用真实数据）\n        X_train = [\n            \"如何安装Python？\",\n            \"我的电脑无法启动。\",\n            \"请帮我创建一个新账户。\",\n            \"这个功能怎么使用？\",\n            \"系统提示错误代码500。\",\n            \"我想添加一个新功能。\",\n            \"如何更新软件？\",\n            \"无法连接到服务器。\",\n            \"请解释一下这个算法。\",\n            \"我的订单状态是什么？\"\n        ]\n        y_train = [\n            \"技术问题\", \"系统错误\", \"业务咨询\", \"功能请求\", \"系统错误\", \n            \"功能请求\", \"技术问题\", \"系统错误\", \"技术问题\", \"业务咨询\"\n        ]\n        \n        # 特征提取\n        vectorizer = TfidfVectorizer()\n        X_train_tfidf = vectorizer.fit_transform(X_train)\n        \n        # 训练分类器\n        clf = MultinomialNB()\n        clf.fit(X_train_tfidf, y_train)\n        \n        # 预处理用户输入\n        user_input_tfidf = vectorizer.transform([user_input])\n        \n        # 进行预测\n        prediction = clf.predict(user_input_tfidf)[0]\n        \n        # 返回分类结果\n        return {\n            \"output1\": prediction  # 注意：必须与 outputs 中的 name 一致\n        }",
        "is_valid": true
      },
      "大模型组件/移除思考过程||移除思考过程": {
        "cleaned_text": "class Component(BaseComponent):\n    name = \"大模型问题分类\"\n    category = \"大模型组件\"\n    description = \"用于对用户问题进行分类，根据预定义的分类标签进行判断\"\n    requirements = \"无特殊依赖，输出为标准 JSON 格式的分类结果。\"\n\n    inputs = [\n        PortDefinition(name=\"input1\", label=\"输入1\", type=ArgumentType.TEXT, connection=ConnectionType.SINGLE),\n    ]\n\n    outputs = [\n        PortDefinition(name=\"output1\", label=\"输出1\", type=ArgumentType.CHOICE),\n    ]\n\n    properties = {\n        \"prop1\": PropertyDefinition(\n            type=PropertyType.CHOICE.value,\n            label=\"分类标签\",\n            choices=[\"技术问题\", \"业务咨询\", \"系统错误\", \"功能请求\", \"其他\"],\n            default=\"其他\",\n            description=\"选择问题分类标签\"\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        \"\"\"\n        params: 节点属性（来自UI）\n        inputs: 上游输入（key=输入端口名）\n        return: 输出数据（key=输出端口名）\n        \"\"\"\n        # 导入第三方工具包\n        from sklearn.feature_extraction.text import TfidfVectorizer\n        from sklearn.naive_bayes import MultinomialNB\n        \n        # 获取用户输入的问题\n        user_input = inputs.get(\"input1\") if inputs else \"\"\n        \n        # 定义训练数据（示例数据，实际应用中应使用真实数据）\n        X_train = [\n            \"如何安装Python？\",\n            \"我的电脑无法启动。\",\n            \"请帮我创建一个新账户。\",\n            \"这个功能怎么使用？\",\n            \"系统提示错误代码500。\",\n            \"我想添加一个新功能。\",\n            \"如何更新软件？\",\n            \"无法连接到服务器。\",\n            \"请解释一下这个算法。\",\n            \"我的订单状态是什么？\"\n        ]\n        y_train = [\n            \"技术问题\", \"系统错误\", \"业务咨询\", \"功能请求\", \"系统错误\", \n            \"功能请求\", \"技术问题\", \"系统错误\", \"技术问题\", \"业务咨询\"\n        ]\n        \n        # 特征提取\n        vectorizer = TfidfVectorizer()\n        X_train_tfidf = vectorizer.fit_transform(X_train)\n        \n        # 训练分类器\n        clf = MultinomialNB()\n        clf.fit(X_train_tfidf, y_train)\n        \n        # 预处理用户输入\n        user_input_tfidf = vectorizer.transform([user_input])\n        \n        # 进行预测\n        prediction = clf.predict(user_input_tfidf)[0]\n        \n        # 返回分类结果\n        return {\n            \"output1\": prediction  # 注意：必须与 outputs 中的 name 一致\n        }",
        "think_text": ""
      },
      "大模型组件/构建多轮对话||构建多轮对话": {
        "output1": [
          {
            "role": "user",
            "content": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码"
          },
          {
            "role": "assistant",
            "content": "好的，我会输出完整可运行的python代码"
          },
          {
            "role": "user",
            "content": "下面是组件输入、输出、属性端口定义代码：\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ConnectionType(str, Enum):\n    \"\"\"连接类型\"\"\"\n    SINGLE = \"单输入\"\n    MULTIPLE = \"多输入\"\n\n\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    MULTILINE = \"多行文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    VARIABLE = \"全局变量\"\n    DYNAMICFORM = \"动态表单\"\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"\n    JSON = \"json\"\n    EXCEL = \"excel\"\n    FILE = \"文件\"\n    UPLOAD = \"上传\"\n    SKLEARNMODEL = \"sklearn模型\"\n    TORCHMODEL = \"torch模型\"\n    IMAGE = \"图片\"\n\n    # 验证是否是文件类型\n    def is_file(self):\n        return self in [ArgumentType.FILE, ArgumentType.EXCEL, ArgumentType.SKLEARNMODEL,\n                        ArgumentType.TORCHMODEL, ArgumentType.UPLOAD]\n\n    def is_number(self):\n        return self in [ArgumentType.INT, ArgumentType.FLOAT]\n\n    def is_array(self):\n        return self in [ArgumentType.ARRAY]\n\n    def is_bool(self):\n        return self == ArgumentType.BOOL\n\n    def is_image(self):\n        return self == ArgumentType.IMAGE\n\n    def serialize(self, display_data):\n        if display_data is None or len(display_data) == 0:\n            return display_data\n        try:\n            if self.is_file() and len(display_data) > 0:\n                # FILE类型：显示文件路径选择\n                display_data = {\n                    \"file_name\": os.path.basename(display_data),\n                    \"file_type\": self.value,\n                    \"file_path\": display_data\n                }\n            elif self == ArgumentType.JSON and isinstance(display_data, str):\n                display_data = json.loads(display_data)\n            elif self.is_number():\n                display_data = float(display_data)\n            elif self.is_bool():\n                display_data = bool(display_data)\n            elif self.is_array() and isinstance(display_data, str):\n                display_data = np.array(eval(display_data))\n            elif self.is_array() and isinstance(display_data, list):\n                display_data = np.array(display_data)\n            elif self.is_image():\n                display_data = Image.open(display_data)\n        except:\n            logger.error(f\"{self.value}序列化错误：{display_data}\")\n\n        return display_data\n\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n    connection: ConnectionType = ConnectionType.SINGLE"
          },
          {
            "role": "assistant",
            "content": "好的，我已经了解了组件节点构成，我不会在生成的代码里包含该代码定义。"
          },
          {
            "role": "user",
            "content": "以下是组件的样例代码，仅供参考，所有的工具包导入均写在函数内：\nclass Component(BaseComponent):\n    name = \"构建多轮对话\"\n    category = \"大模型组件\"\n    description = \"用于构建符合大模型输入格式的多轮对话消息列表，支持追加新消息。\"\n    requirements = \"无特殊依赖，输出为标准 JSON 格式的对话列表。\"\n\n    inputs = [\n        PortDefinition(name=\"history\", label=\"输入1\", type=ArgumentType.JSON, connection=ConnectionType.SINGLE),\n    ]\n\n    outputs = [\n        PortDefinition(name=\"output1\", label=\"输出1\", type=ArgumentType.JSON),\n    ]\n\n    properties = {\n        \"prop1\": PropertyDefinition(\n            type=PropertyType.DYNAMICFORM,\n            label=\"新增消息\",\n            schema={\n                \"role\": {\n                    \"type\": PropertyType.CHOICE.value,\n                    \"default\": \"user\",\n                    \"label\": \"角色\",\n                    \"choices\": [\"system\", \"user\", \"assistant\"]\n                },\n                \"content\": {\n                    \"type\": PropertyType.LONGTEXT.value,\n                    \"default\": \"\",\n                    \"label\": \"内容\",\n                },\n            }\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        \"\"\"\n        params: 节点属性（来自UI）\n        inputs: 上游输入（key=输入端口名）\n        return: 输出数据（key=输出端口名）\n        \"\"\"\n        # 获取历史对话（如果有的话）\n        history = inputs.get(\"history\") if inputs else None\n        if history is None:\n            history = []\n\n        # 验证 history 是否为 list\n        if not isinstance(history, list):\n            history = []\n        self.logger.info(params.prop1)\n\n        # 获取用户配置的新消息\n        messages = history + [\n            {\n                \"role\": message.role,\n                \"content\": message.content\n            } for message in params.prop1\n        ]\n\n        # 返回符合大模型输入格式的对话列表\n        return {\n            \"output1\": messages  # 注意：必须与 outputs 中的 name 一致\n        }\n"
          },
          {
            "role": "assistant",
            "content": "好的，我已经了解了组件代码结构。"
          }
        ]
      },
      "数据集成/获取全局变量||获取全局变量": {
        "output1": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
      },
      "测试组件/添加字符串||添加字符串": {
        "output1": "文本内容qwen3-30b-a3bqwen3-30b-a3bqwen3-30b-a3bqwen3-30b-a3b"
      },
      "数据集成/文本输入||文本输入": {
        "text": "文本内容"
      },
      "控制流/输入端口||输入端口": {},
      "控制流/输出端口||输出端口": {},
      "测试组件/逻辑判断||逻辑判断": {},
      "数据集成/文本输入||文本输入 1": {
        "text": "True"
      },
      "数据集成/文本输入||文本输入 2": {
        "text": "测试1的伟大伟大·"
      },
      "测试组件/逻辑判断||逻辑判断 1": {},
      "数据集成/文本输入||文本输入 3": {
        "text": "文本内容"
      },
      "测试组件/逻辑判断||逻辑判断 2": {},
      "测试组件/逻辑判断||逻辑判断 3": {},
      "测试组件/逻辑判断||逻辑判断 4": {
        "output": true
      },
      "unknown||条件分支": {}
    },
    "column_select": {
      "大模型组件/大模型对话||大模型对话": {},
      "数据集成/长文本输入||组件意图": {},
      "大模型组件/JSON文本包装||JSON文本包装": {},
      "大模型组件/提示词模板||提示词模板 3": {},
      "数据集成/长文本输入||组件输入": {},
      "大模型组件/JSON文本包装||JSON文本包装 1": {},
      "大模型组件/JSON文本包装||JSON文本包装 3": {},
      "数据集成/长文本输入||组件输出": {},
      "数据存储/组件保存||组件保存": {},
      "大模型组件/大模型输出解析||大模型输出解析": {},
      "大模型组件/移除思考过程||移除思考过程": {},
      "大模型组件/构建多轮对话||构建多轮对话": {},
      "数据集成/获取全局变量||获取全局变量": {},
      "测试组件/添加字符串||添加字符串": {},
      "数据集成/文本输入||文本输入": {},
      "控制流/输入端口||输入端口": {},
      "控制流/输出端口||输出端口": {},
      "测试组件/逻辑判断||逻辑判断": {},
      "数据集成/文本输入||文本输入 1": {},
      "数据集成/文本输入||文本输入 2": {},
      "测试组件/逻辑判断||逻辑判断 1": {},
      "数据集成/文本输入||文本输入 3": {},
      "测试组件/逻辑判断||逻辑判断 2": {},
      "测试组件/逻辑判断||逻辑判断 3": {},
      "测试组件/逻辑判断||逻辑判断 4": {},
      "unknown||条件分支": {}
    }
  },
  "global_variable": {
    "env": {
      "user_id": null,
      "canvas_id": null,
      "session_id": null,
      "run_id": null,
      "metadata": {
        "PYTHONPATH": ".",
        "PYTHONUNBUFFERED": "1",
        "PYTHONIOENCODING": "utf-8",
        "PYTHONWARNINGS": "ignore",
        "TZ": "Asia/Shanghai",
        "LANG": "en_US.UTF-8",
        "OMP_NUM_THREADS": "1",
        "MKL_NUM_THREADS": "1",
        "CUDA_VISIBLE_DEVICES": "0"
      }
    },
    "custom": {
      "model_name": {
        "value": "qwen3-30b-a3b",
        "description": null,
        "scope": "global",
        "read_only": false
      },
      "url": {
        "value": "http://168.168.10.110:20000",
        "description": null,
        "scope": "global",
        "read_only": false
      },
      "fets": {
        "value": "rfew",
        "description": null,
        "scope": "global",
        "read_only": false
      }
    },
    "node_vars": {}
  }
}