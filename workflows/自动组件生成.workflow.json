{
  "version": "1.0",
  "graph": {
    "graph": {
      "layout_direction": 0,
      "acyclic": true,
      "pipe_collision": false,
      "pipe_slicing": true,
      "pipe_style": 2,
      "accept_connection_types": "{}",
      "reject_connection_types": "{}"
    },
    "nodes": {
      "0x15a68b5d990": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_大模型对话",
        "icon": null,
        "name": "大模型对话",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 525.0,
        "height": 452.3,
        "pos": [
          -668.9228905310038,
          1891.2941688118208
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "model_name": "qwen3-30b-a3b",
            "url": "http://168.168.10.110:20000",
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "model": "qwen3-30b-a3b",
          "api_key": "",
          "base_url": "http://168.168.10.110:20000",
          "system_prompt": "你是一个代码编辑专家，能够根据用户的需求生成专业的python代码，除了python代码不要输出任何其他文字。",
          "temperature": 0.3,
          "max_tokens": "20000",
          "model_params": [
            {
              "key": "chat_template_kwargs",
              "value": "{\"enable_thinking\": false}"
            }
          ]
        }
      },
      "0x15a4d2c58a0": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件意图",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2186.6897671231886,
          1538.2556664779954
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "input_text": "我的需求是开发一个大模型智能问题分类组件"
        }
      },
      "0x15a6915cd90": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1657.414133516464,
          1540.4696945483504
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "prop_0": "intention"
        }
      },
      "0x15a4c531a80": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_提示词模板",
        "icon": null,
        "name": "提示词模板 3",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 84.80000000000001,
        "pos": [
          -1158.5801054368776,
          1701.0433487869439
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "template": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码\n\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"        # 不需要读取,传进来的数据就是dataframe数据\n    JSON = \"json\"   # 不需要读取，传进来的数据已经解析好\n    EXCEL = \"excel\"   # 不需要读取,传进来的数据就是dataframe数据\n    FILE = \"文件\"    # 文本文件\n    UPLOAD = \"上传\"   # \n    SKLEARNMODEL = \"sklearn模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    TORCHMODEL = \"torch模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    IMAGE = \"图片\"   # 传进来的数据格式为PIL.Image\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n\n## 组件属性参数定义代码\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    DYNAMICFORM = \"动态表单\"   # 可以动态添加属性数据格式为：列表[ 字典{} ]\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n## 组件样例代码（仅供参考）\nclass Component(BaseComponent):\n    name = \"提示词模板\"\n    category = \"大模型组件\"\n    description = \"\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"variables\", label=\"变量字典\", type=ArgumentType.JSON),\n    ]\n    outputs = [\n        PortDefinition(name=\"prompt\", label=\"生成的提示词\", type=ArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"template\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"\"\"你好，{{name}}！今天是{{day}}。\"\"\",\n            label=\"提示词模板\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        template = params.get(\"template\", \"\")\n        variables = inputs.get(\"variables\", {}) if inputs else {}\n\n        if isinstance(variables, str):\n            import json\n            try:\n                variables = json.loads(variables)\n            except:\n                variables = {}\n\n        # 替换 {{key}} 为变量值\n        def replace_match(match):\n            key = match.group(1)\n            return str(variables.get(key, match.group(0)))\n\n        prompt = re.sub(r\"\\{\\{(\\w+)\\}\\}\", replace_match, template)\n        self.logger.info(prompt)    # 组件内日志输出使用类中定义的self.logger，使用方法与loguru.logger使用方法一致。\n        \n        return {\"prompt\": prompt}\n\n## 组件开发需求\n{{intention}}\n\n## 组件输入参数\n{{input}}\n\n## 组件输出参数\n{{output}}\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码\n"
        }
      },
      "0x15a4d2c6b30": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件输入",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2186.3294309731614,
          1703.3662226190318
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "input_text": "输入是用户的问题文本，组件参数是所有问题分类"
        }
      },
      "0x15a68d40850": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装 1",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1685.5683197675417,
          1702.7078296656764
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "prop_0": "input"
        }
      },
      "0x15a4afa92d0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装 3",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1650.0577512331129,
          1884.7859879001708
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "prop_0": "output"
        }
      },
      "0x15a6901acb0": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件输出",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2167.2633820555793,
          1882.1850401508473
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "input_text": "输出是问题分类结果"
        }
      },
      "0x15a69019d80": {
        "type_": "dynamic.StatusDynamicNode_数据存储_组件保存",
        "icon": null,
        "name": "组件保存",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 160,
        "height": 60,
        "pos": [
          947.1487304459199,
          1885.5024171272573
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          }
        }
      },
      "0x15a4ca0b5b0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_大模型输出解析",
        "icon": null,
        "name": "大模型输出解析",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 292.0,
        "height": 122.60000000000001,
        "pos": [
          576.7745802044889,
          1885.0254042598824
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "strict": true,
          "type": "python"
        }
      },
      "0x15a68fc5630": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_移除思考过程",
        "icon": null,
        "name": "移除思考过程",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 455.0,
        "height": 86.9,
        "pos": [
          -7.780470444673426,
          1888.3933897249433
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "remove_empty_lines": true,
          "keep_inner_if_no_outer": true
        }
      },
      "0x15a68aaa380": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_构建多轮对话",
        "icon": null,
        "name": "构建多轮对话",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 499.0,
        "height": 182.45000000000002,
        "pos": [
          -1667.3915274262924,
          2147.2856638726194
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "model_name": "qwen3-30b-a3b",
            "url": "http://168.168.10.110:20000",
            "PYTHONPATH": ".",
            "PYTHONUNBUFFERED": "1",
            "PYTHONIOENCODING": "utf-8",
            "PYTHONWARNINGS": "ignore",
            "TZ": "Asia/Shanghai",
            "LANG": "en_US.UTF-8",
            "OMP_NUM_THREADS": "1",
            "MKL_NUM_THREADS": "1",
            "CUDA_VISIBLE_DEVICES": "0"
          },
          "prop1": [
            {
              "role": "user",
              "content": "test"
            },
            {
              "role": "assistant",
              "content": "test2"
            }
          ]
        }
      },
      "0x15a68a7ceb0": {
        "type_": "dynamic.StatusDynamicNode_数据集成_获取全局变量",
        "icon": null,
        "name": "获取全局变量",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 372.0,
        "height": 94.25,
        "pos": [
          -1546.154550343867,
          2500.5408711084697
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {
              "大模型对话 response": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
            }
          },
          "prop1": "node_vars.大模型对话 response"
        }
      },
      "0x15a68a7c970": {
        "type_": "dynamic.StatusDynamicNode_测试组件_添加字符串",
        "icon": null,
        "name": "添加字符串",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": true,
        "visible": true,
        "width": 401.0,
        "height": 94.25,
        "pos": [
          -1208.408892334515,
          2741.405700278341
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {
              "大模型对话 response": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
            }
          },
          "prop1": "custom.model_name"
        }
      },
      "0x15a68aa81f0": {
        "type_": "dynamic.StatusDynamicNode_数据集成_文本输入",
        "icon": null,
        "name": "文本输入",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -1890.9644946161093,
          2766.5385899840508
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {
              "大模型对话 response": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
            }
          },
          "input": "文本内容"
        }
      },
      "0x15a68c6bee0": {
        "type_": "control_flow.ControlFlowInputPort",
        "icon": null,
        "name": "输入端口",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": true,
        "visible": true,
        "width": 153.0,
        "height": 60,
        "pos": [
          -1411.408892334515,
          2758.530700278341
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {}
        }
      },
      "0x15a6915ea70": {
        "type_": "control_flow.ControlFlowOutputPort",
        "icon": null,
        "name": "输出端口",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": true,
        "visible": true,
        "width": 153.0,
        "height": 60,
        "pos": [
          -776.408892334515,
          2758.530700278341
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {}
        }
      },
      "0x15a68d8f100": {
        "type_": "control_flow.ControlFlowIterateNode",
        "icon": null,
        "name": "迭代控制流区域",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": true,
        "visible": true,
        "width": 868.0,
        "height": 174.25,
        "pos": [
          -1451.408892334515,
          2701.405700278341
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "global_variable": {
            "env": {
              "user_id": null,
              "canvas_id": null,
              "session_id": null,
              "run_id": null,
              "metadata": {
                "PYTHONPATH": ".",
                "PYTHONUNBUFFERED": "1",
                "PYTHONIOENCODING": "utf-8",
                "PYTHONWARNINGS": "ignore",
                "TZ": "Asia/Shanghai",
                "LANG": "en_US.UTF-8",
                "OMP_NUM_THREADS": "1",
                "MKL_NUM_THREADS": "1",
                "CUDA_VISIBLE_DEVICES": "0"
              }
            },
            "custom": {
              "model_name": {
                "value": "qwen3-30b-a3b",
                "description": null,
                "scope": "global",
                "read_only": false
              },
              "url": {
                "value": "http://168.168.10.110:20000",
                "description": null,
                "scope": "global",
                "read_only": false
              }
            },
            "node_vars": {
              "大模型对话 response": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
            }
          },
          "backdrop_text": "",
          "current_index": 4,
          "loop_nums": 4,
          "max_iterations": 1000
        }
      }
    },
    "connections": [
      {
        "in": [
          "0x15a68b5d990",
          "user_input"
        ],
        "out": [
          "0x15a4c531a80",
          "prompt"
        ]
      },
      {
        "in": [
          "0x15a68b5d990",
          "history"
        ],
        "out": [
          "0x15a68aaa380",
          "output1"
        ]
      },
      {
        "out": [
          "0x15a68b5d990",
          "response"
        ],
        "in": [
          "0x15a68fc5630",
          "raw_text"
        ]
      },
      {
        "out": [
          "0x15a4d2c58a0",
          "output"
        ],
        "in": [
          "0x15a6915cd90",
          "input1"
        ]
      },
      {
        "out": [
          "0x15a6915cd90",
          "output1"
        ],
        "in": [
          "0x15a4c531a80",
          "variables"
        ]
      },
      {
        "in": [
          "0x15a4c531a80",
          "variables"
        ],
        "out": [
          "0x15a68d40850",
          "output1"
        ]
      },
      {
        "in": [
          "0x15a4c531a80",
          "variables"
        ],
        "out": [
          "0x15a4afa92d0",
          "output1"
        ]
      },
      {
        "out": [
          "0x15a4d2c6b30",
          "output"
        ],
        "in": [
          "0x15a68d40850",
          "input1"
        ]
      },
      {
        "in": [
          "0x15a4afa92d0",
          "input1"
        ],
        "out": [
          "0x15a6901acb0",
          "output"
        ]
      },
      {
        "in": [
          "0x15a69019d80",
          "text"
        ],
        "out": [
          "0x15a4ca0b5b0",
          "parsed_json"
        ]
      },
      {
        "in": [
          "0x15a4ca0b5b0",
          "llm_output"
        ],
        "out": [
          "0x15a68fc5630",
          "cleaned_text"
        ]
      },
      {
        "in": [
          "0x15a68a7c970",
          "input1"
        ],
        "out": [
          "0x15a68c6bee0",
          "output"
        ]
      },
      {
        "out": [
          "0x15a68a7c970",
          "output1"
        ],
        "in": [
          "0x15a6915ea70",
          "input"
        ]
      },
      {
        "out": [
          "0x15a68aa81f0",
          "text"
        ],
        "in": [
          "0x15a68d8f100",
          "inputs"
        ]
      }
    ]
  },
  "runtime": {
    "environment": "3.11",
    "environment_exe": "D:\\work\\WorkFlowGUI\\envs\\miniconda\\envs\\3.11\\python.exe",
    "node_id2stable_key": {
      "0x15a68b5d990": "大模型组件/大模型对话||大模型对话",
      "0x15a4d2c58a0": "数据集成/长文本输入||组件意图",
      "0x15a6915cd90": "大模型组件/JSON文本包装||JSON文本包装",
      "0x15a4c531a80": "大模型组件/提示词模板||提示词模板 3",
      "0x15a4d2c6b30": "数据集成/长文本输入||组件输入",
      "0x15a68d40850": "大模型组件/JSON文本包装||JSON文本包装 1",
      "0x15a4afa92d0": "大模型组件/JSON文本包装||JSON文本包装 3",
      "0x15a6901acb0": "数据集成/长文本输入||组件输出",
      "0x15a69019d80": "数据存储/组件保存||组件保存",
      "0x15a4ca0b5b0": "大模型组件/大模型输出解析||大模型输出解析",
      "0x15a68fc5630": "大模型组件/移除思考过程||移除思考过程",
      "0x15a68aaa380": "大模型组件/构建多轮对话||构建多轮对话",
      "0x15a68a7ceb0": "数据集成/获取全局变量||获取全局变量",
      "0x15a68a7c970": "测试组件/添加字符串||添加字符串",
      "0x15a68aa81f0": "数据集成/文本输入||文本输入",
      "0x15a68c6bee0": "控制流/输入端口||输入端口",
      "0x15a6915ea70": "控制流/输出端口||输出端口"
    },
    "node_states": {
      "大模型组件/大模型对话||大模型对话": "success",
      "数据集成/长文本输入||组件意图": "success",
      "大模型组件/JSON文本包装||JSON文本包装": "success",
      "大模型组件/提示词模板||提示词模板 3": "success",
      "数据集成/长文本输入||组件输入": "success",
      "大模型组件/JSON文本包装||JSON文本包装 1": "success",
      "大模型组件/JSON文本包装||JSON文本包装 3": "success",
      "数据集成/长文本输入||组件输出": "success",
      "数据存储/组件保存||组件保存": "success",
      "大模型组件/大模型输出解析||大模型输出解析": "success",
      "大模型组件/移除思考过程||移除思考过程": "success",
      "大模型组件/构建多轮对话||构建多轮对话": "success",
      "数据集成/获取全局变量||获取全局变量": "success",
      "测试组件/添加字符串||添加字符串": "success",
      "数据集成/文本输入||文本输入": "success",
      "控制流/输入端口||输入端口": "pending",
      "控制流/输出端口||输出端口": "pending"
    },
    "node_inputs": {
      "大模型组件/大模型对话||大模型对话": {},
      "数据集成/长文本输入||组件意图": {},
      "大模型组件/JSON文本包装||JSON文本包装": {},
      "大模型组件/提示词模板||提示词模板 3": {},
      "数据集成/长文本输入||组件输入": {},
      "大模型组件/JSON文本包装||JSON文本包装 1": {},
      "大模型组件/JSON文本包装||JSON文本包装 3": {},
      "数据集成/长文本输入||组件输出": {},
      "数据存储/组件保存||组件保存": {},
      "大模型组件/大模型输出解析||大模型输出解析": {},
      "大模型组件/移除思考过程||移除思考过程": {},
      "大模型组件/构建多轮对话||构建多轮对话": {},
      "数据集成/获取全局变量||获取全局变量": {},
      "测试组件/添加字符串||添加字符串": {},
      "数据集成/文本输入||文本输入": {},
      "控制流/输入端口||输入端口": {},
      "控制流/输出端口||输出端口": {}
    },
    "node_outputs": {
      "大模型组件/大模型对话||大模型对话": {
        "response": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}",
        "raw_output": {
          "id": "chatcmpl-80a86a0a191443efbd96672da7eabf04",
          "choices": [
            {
              "finish_reason": "stop",
              "index": 0,
              "logprobs": null,
              "message": {
                "content": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}",
                "refusal": null,
                "role": "assistant",
                "annotations": null,
                "audio": null,
                "function_call": null,
                "tool_calls": [],
                "reasoning_content": null
              },
              "stop_reason": null,
              "token_ids": null
            }
          ],
          "created": 1760439915,
          "model": "qwen3-30b-a3b",
          "object": "chat.completion",
          "service_tier": null,
          "system_fingerprint": null,
          "usage": {
            "completion_tokens": 442,
            "prompt_tokens": 1061,
            "total_tokens": 1503,
            "completion_tokens_details": null,
            "prompt_tokens_details": null
          },
          "prompt_logprobs": null,
          "prompt_token_ids": null,
          "kv_transfer_params": null
        },
        "history": [
          {
            "role": "user",
            "content": "test"
          },
          {
            "role": "assistant",
            "content": "test2"
          },
          {
            "role": "user",
            "content": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码\n\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"        # 不需要读取,传进来的数据就是dataframe数据\n    JSON = \"json\"   # 不需要读取，传进来的数据已经解析好\n    EXCEL = \"excel\"   # 不需要读取,传进来的数据就是dataframe数据\n    FILE = \"文件\"    # 文本文件\n    UPLOAD = \"上传\"   # \n    SKLEARNMODEL = \"sklearn模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    TORCHMODEL = \"torch模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    IMAGE = \"图片\"   # 传进来的数据格式为PIL.Image\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n\n## 组件属性参数定义代码\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    DYNAMICFORM = \"动态表单\"   # 可以动态添加属性数据格式为：列表[ 字典{} ]\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n## 组件样例代码（仅供参考）\nclass Component(BaseComponent):\n    name = \"提示词模板\"\n    category = \"大模型组件\"\n    description = \"\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"variables\", label=\"变量字典\", type=ArgumentType.JSON),\n    ]\n    outputs = [\n        PortDefinition(name=\"prompt\", label=\"生成的提示词\", type=ArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"template\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"\"\"你好，{{name}}！今天是{{day}}。\"\"\",\n            label=\"提示词模板\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        template = params.get(\"template\", \"\")\n        variables = inputs.get(\"variables\", {}) if inputs else {}\n\n        if isinstance(variables, str):\n            import json\n            try:\n                variables = json.loads(variables)\n            except:\n                variables = {}\n\n        # 替换 {{key}} 为变量值\n        def replace_match(match):\n            key = match.group(1)\n            return str(variables.get(key, match.group(0)))\n\n        prompt = re.sub(r\"\\{\\{(\\w+)\\}\\}\", replace_match, template)\n        self.logger.info(prompt)    # 组件内日志输出使用类中定义的self.logger，使用方法与loguru.logger使用方法一致。\n        \n        return {\"prompt\": prompt}\n\n## 组件开发需求\n我的需求是开发一个大模型智能问题分类组件\n\n## 组件输入参数\n输入是用户的问题文本，组件参数是所有问题分类\n\n## 组件输出参数\n输出是问题分类结果\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码"
          },
          {
            "role": "assistant",
            "content": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
          }
        ]
      },
      "数据集成/长文本输入||组件意图": {
        "output": "我的需求是开发一个大模型智能问题分类组件"
      },
      "大模型组件/JSON文本包装||JSON文本包装": {
        "output1": {
          "intention": "我的需求是开发一个大模型智能问题分类组件"
        }
      },
      "大模型组件/提示词模板||提示词模板 3": {
        "prompt": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码\n\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"        # 不需要读取,传进来的数据就是dataframe数据\n    JSON = \"json\"   # 不需要读取，传进来的数据已经解析好\n    EXCEL = \"excel\"   # 不需要读取,传进来的数据就是dataframe数据\n    FILE = \"文件\"    # 文本文件\n    UPLOAD = \"上传\"   # \n    SKLEARNMODEL = \"sklearn模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    TORCHMODEL = \"torch模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    IMAGE = \"图片\"   # 传进来的数据格式为PIL.Image\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n\n## 组件属性参数定义代码\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    DYNAMICFORM = \"动态表单\"   # 可以动态添加属性数据格式为：列表[ 字典{} ]\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n## 组件样例代码（仅供参考）\nclass Component(BaseComponent):\n    name = \"提示词模板\"\n    category = \"大模型组件\"\n    description = \"\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"variables\", label=\"变量字典\", type=ArgumentType.JSON),\n    ]\n    outputs = [\n        PortDefinition(name=\"prompt\", label=\"生成的提示词\", type=ArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"template\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"\"\"你好，{{name}}！今天是{{day}}。\"\"\",\n            label=\"提示词模板\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        template = params.get(\"template\", \"\")\n        variables = inputs.get(\"variables\", {}) if inputs else {}\n\n        if isinstance(variables, str):\n            import json\n            try:\n                variables = json.loads(variables)\n            except:\n                variables = {}\n\n        # 替换 {{key}} 为变量值\n        def replace_match(match):\n            key = match.group(1)\n            return str(variables.get(key, match.group(0)))\n\n        prompt = re.sub(r\"\\{\\{(\\w+)\\}\\}\", replace_match, template)\n        self.logger.info(prompt)    # 组件内日志输出使用类中定义的self.logger，使用方法与loguru.logger使用方法一致。\n        \n        return {\"prompt\": prompt}\n\n## 组件开发需求\n我的需求是开发一个大模型智能问题分类组件\n\n## 组件输入参数\n输入是用户的问题文本，组件参数是所有问题分类\n\n## 组件输出参数\n输出是问题分类结果\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码\n"
      },
      "数据集成/长文本输入||组件输入": {
        "output": "输入是用户的问题文本，组件参数是所有问题分类"
      },
      "大模型组件/JSON文本包装||JSON文本包装 1": {
        "output1": {
          "input": "输入是用户的问题文本，组件参数是所有问题分类"
        }
      },
      "大模型组件/JSON文本包装||JSON文本包装 3": {
        "output1": {
          "output": "输出是问题分类结果"
        }
      },
      "数据集成/长文本输入||组件输出": {
        "output": "输出是问题分类结果"
      },
      "数据存储/组件保存||组件保存": {
        "file_path": "D:\\work\\WorkFlowGUI\\app\\components\\generated\\generated_5cc586a6-543b-4097-b452-1b9cb5d11606.py"
      },
      "大模型组件/大模型输出解析||大模型输出解析": {
        "parsed_json": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户的问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品建议', '其他']\",\n            label=\"问题分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品建议', '其他']\")\n\n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品建议\", \"其他\"]\n\n        # 简单的分类逻辑（可以根据实际需求进行扩展）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"when\", \"where\", \"why\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"建议\", \"改进\", \"优化\"]):\n            classification = \"产品建议\"\n        elif any(keyword in question for keyword in [\"业务\", \"流程\", \"操作\"]):\n            classification = \"业务咨询\"\n        else:\n            classification = \"其他\"\n\n        self.logger.info(f\"分类结果: {classification}\")    # 组件内日志输出使用类中定义的self.logger，使用方法与loguru.logger使用方法一致。\n        \n        return {\"classification\": classification}",
        "is_valid": true
      },
      "大模型组件/移除思考过程||移除思考过程": {
        "cleaned_text": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户的问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品建议', '其他']\",\n            label=\"问题分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品建议', '其他']\")\n\n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品建议\", \"其他\"]\n\n        # 简单的分类逻辑（可以根据实际需求进行扩展）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"when\", \"where\", \"why\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"建议\", \"改进\", \"优化\"]):\n            classification = \"产品建议\"\n        elif any(keyword in question for keyword in [\"业务\", \"流程\", \"操作\"]):\n            classification = \"业务咨询\"\n        else:\n            classification = \"其他\"\n\n        self.logger.info(f\"分类结果: {classification}\")    # 组件内日志输出使用类中定义的self.logger，使用方法与loguru.logger使用方法一致。\n        \n        return {\"classification\": classification}",
        "think_text": ""
      },
      "大模型组件/构建多轮对话||构建多轮对话": {
        "output1": [
          {
            "role": "user",
            "content": "test"
          },
          {
            "role": "assistant",
            "content": "test2"
          }
        ]
      },
      "数据集成/获取全局变量||获取全局变量": {
        "output1": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
      },
      "测试组件/添加字符串||添加字符串": {
        "output1": "文本内容qwen3-30b-a3bqwen3-30b-a3bqwen3-30b-a3bqwen3-30b-a3b"
      },
      "数据集成/文本输入||文本输入": {
        "text": "文本内容"
      },
      "控制流/输入端口||输入端口": {
        "output": "文本内容qwen3-30b-a3bqwen3-30b-a3bqwen3-30b-a3b"
      },
      "控制流/输出端口||输出端口": {}
    },
    "column_select": {
      "大模型组件/大模型对话||大模型对话": {},
      "数据集成/长文本输入||组件意图": {},
      "大模型组件/JSON文本包装||JSON文本包装": {},
      "大模型组件/提示词模板||提示词模板 3": {},
      "数据集成/长文本输入||组件输入": {},
      "大模型组件/JSON文本包装||JSON文本包装 1": {},
      "大模型组件/JSON文本包装||JSON文本包装 3": {},
      "数据集成/长文本输入||组件输出": {},
      "数据存储/组件保存||组件保存": {},
      "大模型组件/大模型输出解析||大模型输出解析": {},
      "大模型组件/移除思考过程||移除思考过程": {},
      "大模型组件/构建多轮对话||构建多轮对话": {},
      "数据集成/获取全局变量||获取全局变量": {},
      "测试组件/添加字符串||添加字符串": {},
      "数据集成/文本输入||文本输入": {},
      "控制流/输入端口||输入端口": {},
      "控制流/输出端口||输出端口": {}
    }
  },
  "global_variable": {
    "env": {
      "user_id": null,
      "canvas_id": null,
      "session_id": null,
      "run_id": null,
      "metadata": {
        "PYTHONPATH": ".",
        "PYTHONUNBUFFERED": "1",
        "PYTHONIOENCODING": "utf-8",
        "PYTHONWARNINGS": "ignore",
        "TZ": "Asia/Shanghai",
        "LANG": "en_US.UTF-8",
        "OMP_NUM_THREADS": "1",
        "MKL_NUM_THREADS": "1",
        "CUDA_VISIBLE_DEVICES": "0"
      }
    },
    "custom": {
      "model_name": {
        "value": "qwen3-30b-a3b",
        "description": null,
        "scope": "global",
        "read_only": false
      },
      "url": {
        "value": "http://168.168.10.110:20000",
        "description": null,
        "scope": "global",
        "read_only": false
      }
    },
    "node_vars": {
      "大模型对话 response": "class Component(BaseComponent):\n    name = \"大模型智能问题分类\"\n    category = \"大模型组件\"\n    description = \"根据用户输入的问题文本，使用大模型进行智能问题分类\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"question\", label=\"用户问题文本\", type=ArgumentType.TEXT),\n    ]\n    outputs = [\n        PortDefinition(name=\"classification\", label=\"问题分类结果\", type=ArgumentArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"category_list\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\",\n            label=\"分类列表\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        question = inputs.get(\"question\", \"\") if inputs else \"\"\n        category_list = params.get(\"category_list\", \"['技术问题', '业务咨询', '产品反馈', '功能请求', '其他']\")\n        \n        # 将分类列表转换为Python列表\n        try:\n            category_list = eval(category_list)\n        except:\n            category_list = [\"技术问题\", \"业务咨询\", \"产品反馈\", \"功能请求\", \"其他\"]\n        \n        # 简单的分类逻辑（实际应使用大模型进行分类）\n        if any(keyword in question for keyword in [\"如何\", \"什么\", \"哪里\", \"当\", \"为什么\", \"怎样\"]):\n            classification = \"技术问题\"\n        elif any(keyword in question for keyword in [\"咨询\", \"了解\", \"信息\", \"帮助\"]):\n            classification = \"业务咨询\"\n        elif any(keyword in question for keyword in [\"反馈\", \"问题\", \"建议\"]):\n            classification = \"产品反馈\"\n        elif any(keyword in question for keyword in [\"请求\", \"需要\", \"想要\"]):\n            classification = \"功能请求\"\n        else:\n            classification = \"其他\"\n        \n        self.logger.info(f\"问题分类结果: {classification}\")\n        \n        return {\"classification\": classification}"
    }
  }
}