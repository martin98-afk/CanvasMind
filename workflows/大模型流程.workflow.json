{
  "version": "1.0",
  "graph": {
    "graph": {
      "layout_direction": 0,
      "acyclic": true,
      "pipe_collision": false,
      "pipe_slicing": true,
      "pipe_style": 2,
      "accept_connection_types": "{}",
      "reject_connection_types": "{}"
    },
    "nodes": {
      "0x29b5713e5c0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_知识库查询",
        "icon": null,
        "name": "知识库查询",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 139.4,
        "pos": [
          -959.895535681566,
          768.119927845014
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "top_k": "3",
          "knowledge_base_id": "default_kb"
        }
      },
      "0x29b57791450": {
        "type_": "dynamic.StatusDynamicNode_数据集成_文本输入",
        "icon": null,
        "name": "文本输入",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -1368.9407714786319,
          803.8386270728136
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "input": "文本内容"
        }
      },
      "0x29b57790e80": {
        "type_": "dynamic.StatusDynamicNode_数据集成_文档上传",
        "icon": null,
        "name": "文档上传",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 160,
        "height": 60,
        "pos": [
          -1284.199532153109,
          1000.3984251577447
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {}
      },
      "0x29b49bfaef0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_模板参数输入",
        "icon": null,
        "name": "模板参数输入",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 479.0,
        "height": 163.55,
        "pos": [
          -1598.039965949007,
          1232.6849882458093
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "variable": [
            {
              "name": "name",
              "type": "mading"
            },
            {
              "name": "day",
              "type": "2025/10/8"
            }
          ]
        }
      },
      "0x29b49bfbf10": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_提示词模板",
        "icon": null,
        "name": "提示词模板",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 84.80000000000001,
        "pos": [
          -905.7174562986543,
          1242.14812093762
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "template": "你好，{{name}}！今天是{{day}}。"
        }
      },
      "0x29b49b96170": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_大模型对话",
        "icon": null,
        "name": "大模型对话",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 525.0,
        "height": 452.3,
        "pos": [
          -668.4343479169348,
          1886.0223029839372
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "model": "qwen/qwen3-30b-a3b",
          "api_key": "",
          "base_url": "http://127.0.0.1:1234/v1",
          "system_prompt": "你是一个代码编辑专家，能够根据用户的需求生成专业的python代码，除了python代码不要输出任何其他文字。",
          "temperature": 0.7,
          "max_tokens": "20000",
          "model_params": [
            {
              "key": "chat_template_kwargs",
              "value": "{\"enable_thinking\": false}"
            }
          ]
        }
      },
      "0x29b49ab2b00": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_提示词模板",
        "icon": null,
        "name": "提示词模板 1",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 84.80000000000001,
        "pos": [
          -929.1518823707852,
          1352.6984395377958
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "template": "你好，{{name}}！今天是{{day}}。"
        }
      },
      "0x29b5774f0a0": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "长文本输入",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 315.0,
        "height": 84.80000000000001,
        "pos": [
          -1678.0700002202877,
          2188.9669258572694
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "input_text": "[]"
        }
      },
      "0x29b577d4520": {
        "type_": "dynamic.StatusDynamicNode_数据转换_文本转json",
        "icon": null,
        "name": "文本转json",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 160,
        "height": 60,
        "pos": [
          -1122.635598088133,
          2197.6455883905837
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {}
      },
      "0x29b498ffc10": {
        "type_": "dynamic.StatusDynamicNode_数据集成_文档上传",
        "icon": null,
        "name": "文档上传 1",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 160,
        "height": 60,
        "pos": [
          -443.4630600248292,
          1307.1943574636655
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {}
      },
      "0x29b570da650": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_文档内容提取",
        "icon": null,
        "name": "文档内容提取",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 113.15,
        "pos": [
          -190.90406874190336,
          1299.3793065981165
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "extract_images": false,
          "page_range": ""
        }
      },
      "0x29b570dac80": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_提示词模板",
        "icon": null,
        "name": "提示词模板 2",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 84.80000000000001,
        "pos": [
          304.8306904104586,
          1334.929023768037
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "template": "总结该文档内容：{{doc}}\n输出结果用json格式包装"
        }
      },
      "0x29b577d5f60": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_大模型对话",
        "icon": null,
        "name": "大模型对话 1",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 373.0,
        "height": 411.35,
        "pos": [
          928.0215051654523,
          1276.1401677735616
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "model": "qwen3-30b-a3b",
          "api_key": "",
          "base_url": "http://168.168.10.110:20000",
          "system_prompt": "你是一个文档总结专家，善于从杂乱无章的文档识别结果中总结出关键信息。",
          "temperature": 0.7,
          "max_tokens": "10000",
          "model_params": []
        }
      },
      "0x29b577d7670": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_大模型对话",
        "icon": null,
        "name": "大模型对话 2",
        "color": [
          13,
          18,
          23,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 373.0,
        "height": 411.35,
        "pos": [
          927.5327489967435,
          1711.1733237869357
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "model": "qwen3-30b-a3b",
          "api_key": "",
          "base_url": "http://168.168.10.110:20000",
          "system_prompt": "你是一个文档总结专家，善于从杂乱无章的文档识别结果中总结出关键信息。",
          "temperature": 0.0,
          "max_tokens": "1000",
          "model_params": []
        }
      },
      "0x29b57835150": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件意图",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2134.57027533123,
          1539.8844005964938
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "input_text": "我的需求是开发一个因子分析组件"
        }
      },
      "0x29b6217d2a0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1577.6061617100274,
          1540.4696945483504
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "prop_0": "intention"
        }
      },
      "0x29b6217d5a0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_提示词模板",
        "icon": null,
        "name": "提示词模板 3",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 361.0,
        "height": 84.80000000000001,
        "pos": [
          -1158.5801054368776,
          1701.0433487869439
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "template": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码\n\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"        # 不需要读取,传进来的数据就是dataframe数据\n    JSON = \"json\"   # 不需要读取，传进来的数据已经解析好\n    EXCEL = \"excel\"   # 不需要读取,传进来的数据就是dataframe数据\n    FILE = \"文件\"    # 文本文件\n    UPLOAD = \"上传\"   # \n    SKLEARNMODEL = \"sklearn模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    TORCHMODEL = \"torch模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    IMAGE = \"图片\"   # 传进来的数据格式为PIL.Image\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n\n## 组件属性参数定义代码\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    DYNAMICFORM = \"动态表单\"   # 可以动态添加属性数据格式为：列表[ 字典{} ]\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n## 组件样例代码（仅供参考）\nclass Component(BaseComponent):\n    name = \"提示词模板\"\n    category = \"大模型组件\"\n    description = \"\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"variables\", label=\"变量字典\", type=ArgumentType.JSON),\n    ]\n    outputs = [\n        PortDefinition(name=\"prompt\", label=\"生成的提示词\", type=ArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"template\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"\"\"你好，{{name}}！今天是{{day}}。\"\"\",\n            label=\"提示词模板\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        template = params.get(\"template\", \"\")\n        variables = inputs.get(\"variables\", {}) if inputs else {}\n\n        if isinstance(variables, str):\n            import json\n            try:\n                variables = json.loads(variables)\n            except:\n                variables = {}\n\n        # 替换 {{key}} 为变量值\n        def replace_match(match):\n            key = match.group(1)\n            return str(variables.get(key, match.group(0)))\n\n        prompt = re.sub(r\"\\{\\{(\\w+)\\}\\}\", replace_match, template)\n        self.logger.info(prompt)    # 组件内日志输出使用类中定义的self.logger，使用方法与loguru.logger使用方法一致。\n        \n        return {\"prompt\": prompt}\n\n## 组件开发需求\n{{intention}}\n\n## 组件输入参数\n{{input}}\n\n## 组件输出参数\n{{output}}\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码\n"
        }
      },
      "0x29b631684c0": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件输入",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2186.3294309731614,
          1703.3662226190318
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "input_text": "输入是csv数据"
        }
      },
      "0x29b6316b850": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装 1",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1685.5683197675417,
          1702.7078296656764
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "prop_0": "input"
        }
      },
      "0x29b6318e9e0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_JSON文本包装",
        "icon": null,
        "name": "JSON文本包装 3",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 337.0,
        "height": 84.80000000000001,
        "pos": [
          -1650.0577512331129,
          1884.7859879001708
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "prop_0": "output"
        }
      },
      "0x29b631a9ab0": {
        "type_": "dynamic.StatusDynamicNode_数据集成_长文本输入",
        "icon": null,
        "name": "组件输出",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 303.0,
        "height": 84.80000000000001,
        "pos": [
          -2167.2633820555793,
          1882.1850401508473
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "input_text": "输出是因子分析结果"
        }
      },
      "0x29b631ab010": {
        "type_": "dynamic.StatusDynamicNode_数据存储_组件保存",
        "icon": null,
        "name": "组件保存",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 160,
        "height": 60,
        "pos": [
          663.2845409494527,
          2077.2079497210066
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {}
      },
      "0x29b631aaa40": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_大模型输出解析",
        "icon": null,
        "name": "大模型输出解析",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 272.0,
        "height": 99.5,
        "pos": [
          278.08888160550975,
          2058.9297920906415
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "strict": true,
          "type": "python"
        }
      },
      "0x29b631bfdf0": {
        "type_": "dynamic.StatusDynamicNode_大模型组件_移除思考过程",
        "icon": null,
        "name": "移除思考过程",
        "color": [
          25,
          70,
          45,
          255
        ],
        "border_color": [
          74,
          84,
          85,
          255
        ],
        "text_color": [
          255,
          255,
          255,
          180
        ],
        "disabled": false,
        "selected": false,
        "visible": true,
        "width": 455.0,
        "height": 86.9,
        "pos": [
          -6.269578034153772,
          1707.415084634544
        ],
        "layout_direction": 0,
        "port_deletion_allowed": false,
        "subgraph_session": {},
        "custom": {
          "remove_empty_lines": true,
          "keep_inner_if_no_outer": true
        }
      }
    },
    "connections": [
      {
        "in": [
          "0x29b5713e5c0",
          "query"
        ],
        "out": [
          "0x29b57791450",
          "text"
        ]
      },
      {
        "out": [
          "0x29b49bfaef0",
          "output"
        ],
        "in": [
          "0x29b49bfbf10",
          "variables"
        ]
      },
      {
        "out": [
          "0x29b49bfaef0",
          "output"
        ],
        "in": [
          "0x29b49ab2b00",
          "variables"
        ]
      },
      {
        "in": [
          "0x29b49b96170",
          "user_input"
        ],
        "out": [
          "0x29b6217d5a0",
          "prompt"
        ]
      },
      {
        "in": [
          "0x29b49b96170",
          "history"
        ],
        "out": [
          "0x29b577d4520",
          "output"
        ]
      },
      {
        "out": [
          "0x29b49b96170",
          "response"
        ],
        "in": [
          "0x29b631bfdf0",
          "raw_text"
        ]
      },
      {
        "out": [
          "0x29b5774f0a0",
          "output"
        ],
        "in": [
          "0x29b577d4520",
          "input"
        ]
      },
      {
        "out": [
          "0x29b498ffc10",
          "file"
        ],
        "in": [
          "0x29b570da650",
          "file_path"
        ]
      },
      {
        "out": [
          "0x29b570da650",
          "text"
        ],
        "in": [
          "0x29b570dac80",
          "variables"
        ]
      },
      {
        "out": [
          "0x29b570dac80",
          "prompt"
        ],
        "in": [
          "0x29b577d5f60",
          "user_input"
        ]
      },
      {
        "out": [
          "0x29b570dac80",
          "prompt"
        ],
        "in": [
          "0x29b577d7670",
          "user_input"
        ]
      },
      {
        "out": [
          "0x29b57835150",
          "output"
        ],
        "in": [
          "0x29b6217d2a0",
          "input1"
        ]
      },
      {
        "out": [
          "0x29b6217d2a0",
          "output1"
        ],
        "in": [
          "0x29b6217d5a0",
          "variables"
        ]
      },
      {
        "in": [
          "0x29b6217d5a0",
          "variables"
        ],
        "out": [
          "0x29b6316b850",
          "output1"
        ]
      },
      {
        "in": [
          "0x29b6217d5a0",
          "variables"
        ],
        "out": [
          "0x29b6318e9e0",
          "output1"
        ]
      },
      {
        "out": [
          "0x29b631684c0",
          "output"
        ],
        "in": [
          "0x29b6316b850",
          "input1"
        ]
      },
      {
        "in": [
          "0x29b6318e9e0",
          "input1"
        ],
        "out": [
          "0x29b631a9ab0",
          "output"
        ]
      },
      {
        "in": [
          "0x29b631ab010",
          "text"
        ],
        "out": [
          "0x29b631aaa40",
          "parsed_json"
        ]
      },
      {
        "in": [
          "0x29b631aaa40",
          "llm_output"
        ],
        "out": [
          "0x29b631bfdf0",
          "cleaned_text"
        ]
      }
    ]
  },
  "runtime": {
    "environment": "3.11",
    "environment_exe": "D:\\work\\WorkFlowGUI\\envs\\miniconda\\envs\\3.11\\python.exe",
    "node_id2stable_key": {
      "0x29b5713e5c0": "大模型组件/知识库查询||知识库查询",
      "0x29b57791450": "数据集成/文本输入||文本输入",
      "0x29b57790e80": "数据集成/文档上传||文档上传",
      "0x29b49bfaef0": "大模型组件/模板参数输入||模板参数输入",
      "0x29b49bfbf10": "大模型组件/提示词模板||提示词模板",
      "0x29b49b96170": "大模型组件/大模型对话||大模型对话",
      "0x29b49ab2b00": "大模型组件/提示词模板||提示词模板 1",
      "0x29b5774f0a0": "数据集成/长文本输入||长文本输入",
      "0x29b577d4520": "数据转换/文本转json||文本转json",
      "0x29b498ffc10": "数据集成/文档上传||文档上传 1",
      "0x29b570da650": "大模型组件/文档内容提取||文档内容提取",
      "0x29b570dac80": "大模型组件/提示词模板||提示词模板 2",
      "0x29b577d5f60": "大模型组件/大模型对话||大模型对话 1",
      "0x29b577d7670": "大模型组件/大模型对话||大模型对话 2",
      "0x29b57835150": "数据集成/长文本输入||组件意图",
      "0x29b6217d2a0": "大模型组件/JSON文本包装||JSON文本包装",
      "0x29b6217d5a0": "大模型组件/提示词模板||提示词模板 3",
      "0x29b631684c0": "数据集成/长文本输入||组件输入",
      "0x29b6316b850": "大模型组件/JSON文本包装||JSON文本包装 1",
      "0x29b6318e9e0": "大模型组件/JSON文本包装||JSON文本包装 3",
      "0x29b631a9ab0": "数据集成/长文本输入||组件输出",
      "0x29b631ab010": "数据存储/组件保存||组件保存",
      "0x29b631aaa40": "大模型组件/大模型输出解析||大模型输出解析",
      "0x29b631bfdf0": "大模型组件/移除思考过程||移除思考过程"
    },
    "node_states": {
      "大模型组件/知识库查询||知识库查询": "unrun",
      "数据集成/文本输入||文本输入": "unrun",
      "数据集成/文档上传||文档上传": "unrun",
      "大模型组件/模板参数输入||模板参数输入": "unrun",
      "大模型组件/提示词模板||提示词模板": "unrun",
      "大模型组件/大模型对话||大模型对话": "success",
      "大模型组件/提示词模板||提示词模板 1": "unrun",
      "数据集成/长文本输入||长文本输入": "success",
      "数据转换/文本转json||文本转json": "success",
      "数据集成/文档上传||文档上传 1": "unrun",
      "大模型组件/文档内容提取||文档内容提取": "unrun",
      "大模型组件/提示词模板||提示词模板 2": "unrun",
      "大模型组件/大模型对话||大模型对话 1": "unrun",
      "大模型组件/大模型对话||大模型对话 2": "unrun",
      "数据集成/长文本输入||组件意图": "success",
      "大模型组件/JSON文本包装||JSON文本包装": "success",
      "大模型组件/提示词模板||提示词模板 3": "success",
      "数据集成/长文本输入||组件输入": "success",
      "大模型组件/JSON文本包装||JSON文本包装 1": "success",
      "大模型组件/JSON文本包装||JSON文本包装 3": "success",
      "数据集成/长文本输入||组件输出": "success",
      "数据存储/组件保存||组件保存": "success",
      "大模型组件/大模型输出解析||大模型输出解析": "success",
      "大模型组件/移除思考过程||移除思考过程": "success"
    },
    "node_inputs": {
      "大模型组件/知识库查询||知识库查询": {},
      "数据集成/文本输入||文本输入": {},
      "数据集成/文档上传||文档上传": {},
      "大模型组件/模板参数输入||模板参数输入": {},
      "大模型组件/提示词模板||提示词模板": {},
      "大模型组件/大模型对话||大模型对话": {},
      "大模型组件/提示词模板||提示词模板 1": {},
      "数据集成/长文本输入||长文本输入": {},
      "数据转换/文本转json||文本转json": {},
      "数据集成/文档上传||文档上传 1": {},
      "大模型组件/文档内容提取||文档内容提取": {},
      "大模型组件/提示词模板||提示词模板 2": {},
      "大模型组件/大模型对话||大模型对话 1": {},
      "大模型组件/大模型对话||大模型对话 2": {},
      "数据集成/长文本输入||组件意图": {},
      "大模型组件/JSON文本包装||JSON文本包装": {},
      "大模型组件/提示词模板||提示词模板 3": {},
      "数据集成/长文本输入||组件输入": {},
      "大模型组件/JSON文本包装||JSON文本包装 1": {},
      "大模型组件/JSON文本包装||JSON文本包装 3": {},
      "数据集成/长文本输入||组件输出": {},
      "数据存储/组件保存||组件保存": {},
      "大模型组件/大模型输出解析||大模型输出解析": {},
      "大模型组件/移除思考过程||移除思考过程": {}
    },
    "node_outputs": {
      "大模型组件/知识库查询||知识库查询": {},
      "数据集成/文本输入||文本输入": {},
      "数据集成/文档上传||文档上传": {},
      "大模型组件/模板参数输入||模板参数输入": {},
      "大模型组件/提示词模板||提示词模板": {},
      "大模型组件/大模型对话||大模型对话": {
        "response": "<think>\n好的，我需要为用户生成一个因子分析组件的Python代码。首先，根据用户的需求，输入是CSV数据，输出是因子分析结果。用户提供的组件输入输出参数定义中，CSV类型的数据已经处理成DataFrame，所以不需要再读取文件。\n\n接下来，组件属性参数方面，用户可能需要设置一些参数，比如因子数量、旋转方法等。根据PropertyType的枚举，我需要选择合适的类型。例如，因子数量可能是整数，旋转方法可能用下拉框选择，而是否标准化可能用布尔值。\n\n然后，考虑代码结构。组件类需要继承BaseComponent，定义inputs和outputs，以及properties。输入端口应该是CSV类型，但根据用户提供的PortDefinition，CSV的type是ArgumentType.CSV，所以 inputs应该包含一个PortDefinition，name为\"input_data\"，label为\"输入数据\"，type=ArgumentType.CSV。输出可能是JSON或TEXT，但用户可能需要结果以某种格式返回，比如JSON。\n\n在properties中，可能需要设置n_components（整数）、rotation（下拉选择）、standardize（布尔）。例如，n_components的默认值设为3，rotation的选项包括'varimax'、'promax'等，standardize默认False。\n\n然后，在run方法中，需要处理输入数据。由于输入是DataFrame，可以直接使用。需要导入必要的库，比如pandas、sklearn的FactorAnalysis，以及可能的numpy。注意用户要求第三方库在函数内导入，不能在文件开头。\n\n因子分析的步骤大致是：标准化数据（如果需要）、创建FactorAnalysis模型、拟合数据、得到因子载荷和得分。然后将结果转换为JSON格式输出。\n\n需要注意处理可能的异常，比如数据是否为空，参数是否有效。同时，日志记录使用self.logger。\n\n最后，确保生成的代码符合用户提供的输入输出参数定义，不添加新的类型，并且属性参数正确。例如，输出端口可能是ArgumentType.JSON或TEXT，根据结果格式决定。\n\n现在将这些思路整合成代码，确保结构正确，参数和端口定义正确，run方法实现因子分析逻辑，并处理输入输出。\n</think>\n\nclass Component(BaseComponent):\n    name = \"因子分析组件\"\n    category = \"统计分析\"\n    description = \"执行因子分析降维操作\"\n    requirements = \"pandas,scikit-learn\"\n\n    inputs = [\n        PortDefinition(name=\"input_data\", label=\"输入数据\", type=ArgumentType.CSV),\n    ]\n    outputs = [\n        PortDefinition(name=\"results\", label=\"分析结果\", type=ArgumentType.JSON),\n    ]\n\n    properties = {\n        \"n_components\": PropertyDefinition(\n            type=PropertyType.INT,\n            default=3,\n            label=\"因子数量\",\n            min=1,\n            max=100\n        ),\n        \"rotation\": PropertyDefinition(\n            type=PropertyChoice,\n            default=\"varimax\",\n            label=\"旋转方法\",\n            choices=[\"varimax\", \"promax\", \"none\"]\n        ),\n        \"standardize\": PropertyDefinition(\n            type=PropertyType.BOOL,\n            default=False,\n            label=\"是否标准化\"\n        )\n    }\n\n    def run(self, params, inputs=None):\n        import pandas as pd\n        from sklearn.decomposition import FactorAnalysis\n        from sklearn.preprocessing import StandardScaler\n\n        # 获取输入数据\n        data = inputs.get(\"input_data\", None)\n        \n        # 处理空数据情况\n        if data is None or data.empty:\n            return {\"error\": \"输入数据为空\"}\n\n        # 标准化处理\n        if params.get(\"standardize\", False):\n            scaler = StandardScaler()\n            scaled_data = scaler.fit_transform(data)\n        else:\n            scaled_data = data.values\n\n        # 创建因子分析模型\n        n_components = int(params.get(\"n_components\", 3))\n        rotation = params.get(\"rotation\", \"varimax\")\n        \n        fa = FactorAnalysis(\n            n_components=n_components,\n            method='principal',\n            rotation=rotation\n        )\n        \n        # 拟合模型\n        fa.fit(scaled_data)\n        \n        # 获取结果\n        results = {\n            \"factor_loadings\": pd.DataFrame(fa.components_, columns=data.columns).to_dict(),\n            \"explained_variance\": fa.explained_variance_ratio_.tolist(),\n            \"scores\": pd.DataFrame(fa.transform(scaled_data), columns=[f\"Factor{i+1}\" for i in range(n_components)]).head(5).to_dict()\n        }\n        \n        return {\"results\": results}",
        "raw_output": {
          "id": "chatcmpl-n9gr2ndmc8wrupbri9fu9",
          "choices": [
            {
              "finish_reason": "stop",
              "index": 0,
              "logprobs": null,
              "message": {
                "content": "<think>\n好的，我需要为用户生成一个因子分析组件的Python代码。首先，根据用户的需求，输入是CSV数据，输出是因子分析结果。用户提供的组件输入输出参数定义中，CSV类型的数据已经处理成DataFrame，所以不需要再读取文件。\n\n接下来，组件属性参数方面，用户可能需要设置一些参数，比如因子数量、旋转方法等。根据PropertyType的枚举，我需要选择合适的类型。例如，因子数量可能是整数，旋转方法可能用下拉框选择，而是否标准化可能用布尔值。\n\n然后，考虑代码结构。组件类需要继承BaseComponent，定义inputs和outputs，以及properties。输入端口应该是CSV类型，但根据用户提供的PortDefinition，CSV的type是ArgumentType.CSV，所以 inputs应该包含一个PortDefinition，name为\"input_data\"，label为\"输入数据\"，type=ArgumentType.CSV。输出可能是JSON或TEXT，但用户可能需要结果以某种格式返回，比如JSON。\n\n在properties中，可能需要设置n_components（整数）、rotation（下拉选择）、standardize（布尔）。例如，n_components的默认值设为3，rotation的选项包括'varimax'、'promax'等，standardize默认False。\n\n然后，在run方法中，需要处理输入数据。由于输入是DataFrame，可以直接使用。需要导入必要的库，比如pandas、sklearn的FactorAnalysis，以及可能的numpy。注意用户要求第三方库在函数内导入，不能在文件开头。\n\n因子分析的步骤大致是：标准化数据（如果需要）、创建FactorAnalysis模型、拟合数据、得到因子载荷和得分。然后将结果转换为JSON格式输出。\n\n需要注意处理可能的异常，比如数据是否为空，参数是否有效。同时，日志记录使用self.logger。\n\n最后，确保生成的代码符合用户提供的输入输出参数定义，不添加新的类型，并且属性参数正确。例如，输出端口可能是ArgumentType.JSON或TEXT，根据结果格式决定。\n\n现在将这些思路整合成代码，确保结构正确，参数和端口定义正确，run方法实现因子分析逻辑，并处理输入输出。\n</think>\n\nclass Component(BaseComponent):\n    name = \"因子分析组件\"\n    category = \"统计分析\"\n    description = \"执行因子分析降维操作\"\n    requirements = \"pandas,scikit-learn\"\n\n    inputs = [\n        PortDefinition(name=\"input_data\", label=\"输入数据\", type=ArgumentType.CSV),\n    ]\n    outputs = [\n        PortDefinition(name=\"results\", label=\"分析结果\", type=ArgumentType.JSON),\n    ]\n\n    properties = {\n        \"n_components\": PropertyDefinition(\n            type=PropertyType.INT,\n            default=3,\n            label=\"因子数量\",\n            min=1,\n            max=100\n        ),\n        \"rotation\": PropertyDefinition(\n            type=PropertyChoice,\n            default=\"varimax\",\n            label=\"旋转方法\",\n            choices=[\"varimax\", \"promax\", \"none\"]\n        ),\n        \"standardize\": PropertyDefinition(\n            type=PropertyType.BOOL,\n            default=False,\n            label=\"是否标准化\"\n        )\n    }\n\n    def run(self, params, inputs=None):\n        import pandas as pd\n        from sklearn.decomposition import FactorAnalysis\n        from sklearn.preprocessing import StandardScaler\n\n        # 获取输入数据\n        data = inputs.get(\"input_data\", None)\n        \n        # 处理空数据情况\n        if data is None or data.empty:\n            return {\"error\": \"输入数据为空\"}\n\n        # 标准化处理\n        if params.get(\"standardize\", False):\n            scaler = StandardScaler()\n            scaled_data = scaler.fit_transform(data)\n        else:\n            scaled_data = data.values\n\n        # 创建因子分析模型\n        n_components = int(params.get(\"n_components\", 3))\n        rotation = params.get(\"rotation\", \"varimax\")\n        \n        fa = FactorAnalysis(\n            n_components=n_components,\n            method='principal',\n            rotation=rotation\n        )\n        \n        # 拟合模型\n        fa.fit(scaled_data)\n        \n        # 获取结果\n        results = {\n            \"factor_loadings\": pd.DataFrame(fa.components_, columns=data.columns).to_dict(),\n            \"explained_variance\": fa.explained_variance_ratio_.tolist(),\n            \"scores\": pd.DataFrame(fa.transform(scaled_data), columns=[f\"Factor{i+1}\" for i in range(n_components)]).head(5).to_dict()\n        }\n        \n        return {\"results\": results}",
                "refusal": null,
                "role": "assistant",
                "annotations": null,
                "audio": null,
                "function_call": null,
                "tool_calls": []
              }
            }
          ],
          "created": 1760105985,
          "model": "qwen/qwen3-30b-a3b",
          "object": "chat.completion",
          "service_tier": null,
          "system_fingerprint": "qwen/qwen3-30b-a3b",
          "usage": {
            "completion_tokens": 944,
            "prompt_tokens": 1033,
            "total_tokens": 1977,
            "completion_tokens_details": null,
            "prompt_tokens_details": null
          },
          "stats": {}
        },
        "history": [
          {
            "role": "user",
            "content": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码\n\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"        # 不需要读取,传进来的数据就是dataframe数据\n    JSON = \"json\"   # 不需要读取，传进来的数据已经解析好\n    EXCEL = \"excel\"   # 不需要读取,传进来的数据就是dataframe数据\n    FILE = \"文件\"    # 文本文件\n    UPLOAD = \"上传\"   # \n    SKLEARNMODEL = \"sklearn模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    TORCHMODEL = \"torch模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    IMAGE = \"图片\"   # 传进来的数据格式为PIL.Image\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n\n## 组件属性参数定义代码\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    DYNAMICFORM = \"动态表单\"   # 可以动态添加属性数据格式为：列表[ 字典{} ]\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n## 组件样例代码（仅供参考）\nclass Component(BaseComponent):\n    name = \"提示词模板\"\n    category = \"大模型组件\"\n    description = \"\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"variables\", label=\"变量字典\", type=ArgumentType.JSON),\n    ]\n    outputs = [\n        PortDefinition(name=\"prompt\", label=\"生成的提示词\", type=ArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"template\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"\"\"你好，{{name}}！今天是{{day}}。\"\"\",\n            label=\"提示词模板\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        template = params.get(\"template\", \"\")\n        variables = inputs.get(\"variables\", {}) if inputs else {}\n\n        if isinstance(variables, str):\n            import json\n            try:\n                variables = json.loads(variables)\n            except:\n                variables = {}\n\n        # 替换 {{key}} 为变量值\n        def replace_match(match):\n            key = match.group(1)\n            return str(variables.get(key, match.group(0)))\n\n        prompt = re.sub(r\"\\{\\{(\\w+)\\}\\}\", replace_match, template)\n        self.logger.info(prompt)    # 组件内日志输出使用类中定义的self.logger，使用方法与loguru.logger使用方法一致。\n        \n        return {\"prompt\": prompt}\n\n## 组件开发需求\n我的需求是开发一个因子分析组件\n\n## 组件输入参数\n输入是csv数据\n\n## 组件输出参数\n输出是因子分析结果\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码"
          },
          {
            "role": "assistant",
            "content": "<think>\n好的，我需要为用户生成一个因子分析组件的Python代码。首先，根据用户的需求，输入是CSV数据，输出是因子分析结果。用户提供的组件输入输出参数定义中，CSV类型的数据已经处理成DataFrame，所以不需要再读取文件。\n\n接下来，组件属性参数方面，用户可能需要设置一些参数，比如因子数量、旋转方法等。根据PropertyType的枚举，我需要选择合适的类型。例如，因子数量可能是整数，旋转方法可能用下拉框选择，而是否标准化可能用布尔值。\n\n然后，考虑代码结构。组件类需要继承BaseComponent，定义inputs和outputs，以及properties。输入端口应该是CSV类型，但根据用户提供的PortDefinition，CSV的type是ArgumentType.CSV，所以 inputs应该包含一个PortDefinition，name为\"input_data\"，label为\"输入数据\"，type=ArgumentType.CSV。输出可能是JSON或TEXT，但用户可能需要结果以某种格式返回，比如JSON。\n\n在properties中，可能需要设置n_components（整数）、rotation（下拉选择）、standardize（布尔）。例如，n_components的默认值设为3，rotation的选项包括'varimax'、'promax'等，standardize默认False。\n\n然后，在run方法中，需要处理输入数据。由于输入是DataFrame，可以直接使用。需要导入必要的库，比如pandas、sklearn的FactorAnalysis，以及可能的numpy。注意用户要求第三方库在函数内导入，不能在文件开头。\n\n因子分析的步骤大致是：标准化数据（如果需要）、创建FactorAnalysis模型、拟合数据、得到因子载荷和得分。然后将结果转换为JSON格式输出。\n\n需要注意处理可能的异常，比如数据是否为空，参数是否有效。同时，日志记录使用self.logger。\n\n最后，确保生成的代码符合用户提供的输入输出参数定义，不添加新的类型，并且属性参数正确。例如，输出端口可能是ArgumentType.JSON或TEXT，根据结果格式决定。\n\n现在将这些思路整合成代码，确保结构正确，参数和端口定义正确，run方法实现因子分析逻辑，并处理输入输出。\n</think>\n\nclass Component(BaseComponent):\n    name = \"因子分析组件\"\n    category = \"统计分析\"\n    description = \"执行因子分析降维操作\"\n    requirements = \"pandas,scikit-learn\"\n\n    inputs = [\n        PortDefinition(name=\"input_data\", label=\"输入数据\", type=ArgumentType.CSV),\n    ]\n    outputs = [\n        PortDefinition(name=\"results\", label=\"分析结果\", type=ArgumentType.JSON),\n    ]\n\n    properties = {\n        \"n_components\": PropertyDefinition(\n            type=PropertyType.INT,\n            default=3,\n            label=\"因子数量\",\n            min=1,\n            max=100\n        ),\n        \"rotation\": PropertyDefinition(\n            type=PropertyChoice,\n            default=\"varimax\",\n            label=\"旋转方法\",\n            choices=[\"varimax\", \"promax\", \"none\"]\n        ),\n        \"standardize\": PropertyDefinition(\n            type=PropertyType.BOOL,\n            default=False,\n            label=\"是否标准化\"\n        )\n    }\n\n    def run(self, params, inputs=None):\n        import pandas as pd\n        from sklearn.decomposition import FactorAnalysis\n        from sklearn.preprocessing import StandardScaler\n\n        # 获取输入数据\n        data = inputs.get(\"input_data\", None)\n        \n        # 处理空数据情况\n        if data is None or data.empty:\n            return {\"error\": \"输入数据为空\"}\n\n        # 标准化处理\n        if params.get(\"standardize\", False):\n            scaler = StandardScaler()\n            scaled_data = scaler.fit_transform(data)\n        else:\n            scaled_data = data.values\n\n        # 创建因子分析模型\n        n_components = int(params.get(\"n_components\", 3))\n        rotation = params.get(\"rotation\", \"varimax\")\n        \n        fa = FactorAnalysis(\n            n_components=n_components,\n            method='principal',\n            rotation=rotation\n        )\n        \n        # 拟合模型\n        fa.fit(scaled_data)\n        \n        # 获取结果\n        results = {\n            \"factor_loadings\": pd.DataFrame(fa.components_, columns=data.columns).to_dict(),\n            \"explained_variance\": fa.explained_variance_ratio_.tolist(),\n            \"scores\": pd.DataFrame(fa.transform(scaled_data), columns=[f\"Factor{i+1}\" for i in range(n_components)]).head(5).to_dict()\n        }\n        \n        return {\"results\": results}"
          }
        ]
      },
      "大模型组件/提示词模板||提示词模板 1": {},
      "数据集成/长文本输入||长文本输入": {
        "output": "[]"
      },
      "数据转换/文本转json||文本转json": {
        "output": []
      },
      "数据集成/文档上传||文档上传 1": {},
      "大模型组件/文档内容提取||文档内容提取": {},
      "大模型组件/提示词模板||提示词模板 2": {},
      "大模型组件/大模型对话||大模型对话 1": {},
      "大模型组件/大模型对话||大模型对话 2": {},
      "数据集成/长文本输入||组件意图": {
        "output": "我的需求是开发一个因子分析组件"
      },
      "大模型组件/JSON文本包装||JSON文本包装": {
        "output1": {
          "intention": "我的需求是开发一个因子分析组件"
        }
      },
      "大模型组件/提示词模板||提示词模板 3": {
        "prompt": "##  任务\n根据我的组件输入、输出、节点参数定义以及我的样例代码、需求等信息自动生成完整的python组件代码\n\n## 组件输入输出参数定义代码（不需要在生成代码里包含）\nclass ArgumentType(str, Enum):\n    \"\"\"参数类型\"\"\"\n    TEXT = \"文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    BOOL = \"布尔值\"\n    ARRAY = \"列表\"\n    CSV = \"csv\"        # 不需要读取,传进来的数据就是dataframe数据\n    JSON = \"json\"   # 不需要读取，传进来的数据已经解析好\n    EXCEL = \"excel\"   # 不需要读取,传进来的数据就是dataframe数据\n    FILE = \"文件\"    # 文本文件\n    UPLOAD = \"上传\"   # \n    SKLEARNMODEL = \"sklearn模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    TORCHMODEL = \"torch模型\"    # 模型类型不需要保存到本地，直接返回后后端代码会自动进行存储\n    IMAGE = \"图片\"   # 传进来的数据格式为PIL.Image\n\nclass PortDefinition(BaseModel):\n    \"\"\"端口定义\"\"\"\n    name: str\n    label: str\n    type: ArgumentType = ArgumentType.TEXT\n\n## 组件属性参数定义代码\nclass PropertyType(str, Enum):\n    \"\"\"属性类型\"\"\"\n    TEXT = \"文本\"\n    LONGTEXT = \"长文本\"\n    INT = \"整数\"\n    FLOAT = \"浮点数\"\n    RANGE = \"范围\"\n    BOOL = \"复选框\"\n    CHOICE = \"下拉框\"\n    DYNAMICFORM = \"动态表单\"   # 可以动态添加属性数据格式为：列表[ 字典{} ]\n\n\nclass PropertyDefinition(BaseModel):\n    \"\"\"属性定义\"\"\"\n    type: PropertyType = PropertyType.TEXT\n    default: Any = \"\"\n    label: str = \"\"\n    choices: List[str] = Field(default_factory=list)\n    filter: str = \"All Files (*)\"  # 用于文件类型过滤\n    schema: Optional[Dict[str, 'PropertyDefinition']] = Field(default=None)  # 表单内每个字段的定义\n    min: float = Field(default=0.0, description=\"最小值\")\n    max: float = Field(default=100.0, description=\"最大值\")\n    step: float = Field(default=1.0, description=\"步长\")\n\n    class Config:\n        # 允许递归引用\n        arbitrary_types_allowed = True\n\n## 组件样例代码（仅供参考）\nclass Component(BaseComponent):\n    name = \"提示词模板\"\n    category = \"大模型组件\"\n    description = \"\"\n    requirements = \"numpy,pandas\"\n\n    inputs = [\n        PortDefinition(name=\"variables\", label=\"变量字典\", type=ArgumentType.JSON),\n    ]\n    outputs = [\n        PortDefinition(name=\"prompt\", label=\"生成的提示词\", type=ArgumentType.TEXT),\n    ]\n\n    properties = {\n        \"template\": PropertyDefinition(\n            type=PropertyType.LONGTEXT,\n            default=\"\"\"你好，{{name}}！今天是{{day}}。\"\"\",\n            label=\"提示词模板\",\n        ),\n    }\n\n    def run(self, params, inputs = None):\n        import re\n        import numpy\n        import pandas\n        self.logger.info(inputs)\n        template = params.get(\"template\", \"\")\n        variables = inputs.get(\"variables\", {}) if inputs else {}\n\n        if isinstance(variables, str):\n            import json\n            try:\n                variables = json.loads(variables)\n            except:\n                variables = {}\n\n        # 替换 {{key}} 为变量值\n        def replace_match(match):\n            key = match.group(1)\n            return str(variables.get(key, match.group(0)))\n\n        prompt = re.sub(r\"\\{\\{(\\w+)\\}\\}\", replace_match, template)\n        self.logger.info(prompt)    # 组件内日志输出使用类中定义的self.logger，使用方法与loguru.logger使用方法一致。\n        \n        return {\"prompt\": prompt}\n\n## 组件开发需求\n我的需求是开发一个因子分析组件\n\n## 组件输入参数\n输入是csv数据\n\n## 组件输出参数\n输出是因子分析结果\n\n## 代码输出要求\n输出代码不需要包含输入、输出以及属性参数定义代码，这部分已经写好了，但是组件定义的输入输出参数必须要在当前参数定义范围之内，不能输出新的参数类型。同时第三方工具包导入时只能在函数内导入，不能在文件开头导入，不要引入Dict，List这些参数格式定义。\n\n## 生成的组件代码\n"
      },
      "数据集成/长文本输入||组件输入": {
        "output": "输入是csv数据"
      },
      "大模型组件/JSON文本包装||JSON文本包装 1": {
        "output1": {
          "input": "输入是csv数据"
        }
      },
      "大模型组件/JSON文本包装||JSON文本包装 3": {
        "output1": {
          "output": "输出是因子分析结果"
        }
      },
      "数据集成/长文本输入||组件输出": {
        "output": "输出是因子分析结果"
      },
      "数据存储/组件保存||组件保存": {
        "file_path": "D:\\work\\WorkFlowGUI\\app\\components\\generated\\generated_b004f280-70be-48fe-903c-3d6c882f9b80.py"
      },
      "大模型组件/大模型输出解析||大模型输出解析": {
        "parsed_json": "class Component(BaseComponent):\n    name = \"因子分析组件\"\n    category = \"统计分析\"\n    description = \"执行因子分析降维操作\"\n    requirements = \"pandas,scikit-learn\"\n    inputs = [\n        PortDefinition(name=\"input_data\", label=\"输入数据\", type=ArgumentType.CSV),\n    ]\n    outputs = [\n        PortDefinition(name=\"results\", label=\"分析结果\", type=ArgumentType.JSON),\n    ]\n    properties = {\n        \"n_components\": PropertyDefinition(\n            type=PropertyType.INT,\n            default=3,\n            label=\"因子数量\",\n            min=1,\n            max=100\n        ),\n        \"rotation\": PropertyDefinition(\n            type=PropertyChoice,\n            default=\"varimax\",\n            label=\"旋转方法\",\n            choices=[\"varimax\", \"promax\", \"none\"]\n        ),\n        \"standardize\": PropertyDefinition(\n            type=PropertyType.BOOL,\n            default=False,\n            label=\"是否标准化\"\n        )\n    }\n    def run(self, params, inputs=None):\n        import pandas as pd\n        from sklearn.decomposition import FactorAnalysis\n        from sklearn.preprocessing import StandardScaler\n        # 获取输入数据\n        data = inputs.get(\"input_data\", None)\n        # 处理空数据情况\n        if data is None or data.empty:\n            return {\"error\": \"输入数据为空\"}\n        # 标准化处理\n        if params.get(\"standardize\", False):\n            scaler = StandardScaler()\n            scaled_data = scaler.fit_transform(data)\n        else:\n            scaled_data = data.values\n        # 创建因子分析模型\n        n_components = int(params.get(\"n_components\", 3))\n        rotation = params.get(\"rotation\", \"varimax\")\n        fa = FactorAnalysis(\n            n_components=n_components,\n            method='principal',\n            rotation=rotation\n        )\n        # 拟合模型\n        fa.fit(scaled_data)\n        # 获取结果\n        results = {\n            \"factor_loadings\": pd.DataFrame(fa.components_, columns=data.columns).to_dict(),\n            \"explained_variance\": fa.explained_variance_ratio_.tolist(),\n            \"scores\": pd.DataFrame(fa.transform(scaled_data), columns=[f\"Factor{i+1}\" for i in range(n_components)]).head(5).to_dict()\n        }\n        return {\"results\": results}",
        "is_valid": true
      },
      "大模型组件/移除思考过程||移除思考过程": {
        "cleaned_text": "class Component(BaseComponent):\n    name = \"因子分析组件\"\n    category = \"统计分析\"\n    description = \"执行因子分析降维操作\"\n    requirements = \"pandas,scikit-learn\"\n    inputs = [\n        PortDefinition(name=\"input_data\", label=\"输入数据\", type=ArgumentType.CSV),\n    ]\n    outputs = [\n        PortDefinition(name=\"results\", label=\"分析结果\", type=ArgumentType.JSON),\n    ]\n    properties = {\n        \"n_components\": PropertyDefinition(\n            type=PropertyType.INT,\n            default=3,\n            label=\"因子数量\",\n            min=1,\n            max=100\n        ),\n        \"rotation\": PropertyDefinition(\n            type=PropertyChoice,\n            default=\"varimax\",\n            label=\"旋转方法\",\n            choices=[\"varimax\", \"promax\", \"none\"]\n        ),\n        \"standardize\": PropertyDefinition(\n            type=PropertyType.BOOL,\n            default=False,\n            label=\"是否标准化\"\n        )\n    }\n    def run(self, params, inputs=None):\n        import pandas as pd\n        from sklearn.decomposition import FactorAnalysis\n        from sklearn.preprocessing import StandardScaler\n        # 获取输入数据\n        data = inputs.get(\"input_data\", None)\n        # 处理空数据情况\n        if data is None or data.empty:\n            return {\"error\": \"输入数据为空\"}\n        # 标准化处理\n        if params.get(\"standardize\", False):\n            scaler = StandardScaler()\n            scaled_data = scaler.fit_transform(data)\n        else:\n            scaled_data = data.values\n        # 创建因子分析模型\n        n_components = int(params.get(\"n_components\", 3))\n        rotation = params.get(\"rotation\", \"varimax\")\n        fa = FactorAnalysis(\n            n_components=n_components,\n            method='principal',\n            rotation=rotation\n        )\n        # 拟合模型\n        fa.fit(scaled_data)\n        # 获取结果\n        results = {\n            \"factor_loadings\": pd.DataFrame(fa.components_, columns=data.columns).to_dict(),\n            \"explained_variance\": fa.explained_variance_ratio_.tolist(),\n            \"scores\": pd.DataFrame(fa.transform(scaled_data), columns=[f\"Factor{i+1}\" for i in range(n_components)]).head(5).to_dict()\n        }\n        return {\"results\": results}",
        "think_text": "<think>\n好的，我需要为用户生成一个因子分析组件的Python代码。首先，根据用户的需求，输入是CSV数据，输出是因子分析结果。用户提供的组件输入输出参数定义中，CSV类型的数据已经处理成DataFrame，所以不需要再读取文件。\n\n接下来，组件属性参数方面，用户可能需要设置一些参数，比如因子数量、旋转方法等。根据PropertyType的枚举，我需要选择合适的类型。例如，因子数量可能是整数，旋转方法可能用下拉框选择，而是否标准化可能用布尔值。\n\n然后，考虑代码结构。组件类需要继承BaseComponent，定义inputs和outputs，以及properties。输入端口应该是CSV类型，但根据用户提供的PortDefinition，CSV的type是ArgumentType.CSV，所以 inputs应该包含一个PortDefinition，name为\"input_data\"，label为\"输入数据\"，type=ArgumentType.CSV。输出可能是JSON或TEXT，但用户可能需要结果以某种格式返回，比如JSON。\n\n在properties中，可能需要设置n_components（整数）、rotation（下拉选择）、standardize（布尔）。例如，n_components的默认值设为3，rotation的选项包括'varimax'、'promax'等，standardize默认False。\n\n然后，在run方法中，需要处理输入数据。由于输入是DataFrame，可以直接使用。需要导入必要的库，比如pandas、sklearn的FactorAnalysis，以及可能的numpy。注意用户要求第三方库在函数内导入，不能在文件开头。\n\n因子分析的步骤大致是：标准化数据（如果需要）、创建FactorAnalysis模型、拟合数据、得到因子载荷和得分。然后将结果转换为JSON格式输出。\n\n需要注意处理可能的异常，比如数据是否为空，参数是否有效。同时，日志记录使用self.logger。\n\n最后，确保生成的代码符合用户提供的输入输出参数定义，不添加新的类型，并且属性参数正确。例如，输出端口可能是ArgumentType.JSON或TEXT，根据结果格式决定。\n\n现在将这些思路整合成代码，确保结构正确，参数和端口定义正确，run方法实现因子分析逻辑，并处理输入输出。\n</think>"
      }
    },
    "column_select": {
      "大模型组件/知识库查询||知识库查询": {},
      "数据集成/文本输入||文本输入": {},
      "数据集成/文档上传||文档上传": {},
      "大模型组件/模板参数输入||模板参数输入": {},
      "大模型组件/提示词模板||提示词模板": {},
      "大模型组件/大模型对话||大模型对话": {},
      "大模型组件/提示词模板||提示词模板 1": {},
      "数据集成/长文本输入||长文本输入": {},
      "数据转换/文本转json||文本转json": {},
      "数据集成/文档上传||文档上传 1": {},
      "大模型组件/文档内容提取||文档内容提取": {},
      "大模型组件/提示词模板||提示词模板 2": {},
      "大模型组件/大模型对话||大模型对话 1": {},
      "大模型组件/大模型对话||大模型对话 2": {},
      "数据集成/长文本输入||组件意图": {},
      "大模型组件/JSON文本包装||JSON文本包装": {},
      "大模型组件/提示词模板||提示词模板 3": {},
      "数据集成/长文本输入||组件输入": {},
      "大模型组件/JSON文本包装||JSON文本包装 1": {},
      "大模型组件/JSON文本包装||JSON文本包装 3": {},
      "数据集成/长文本输入||组件输出": {},
      "数据存储/组件保存||组件保存": {},
      "大模型组件/大模型输出解析||大模型输出解析": {},
      "大模型组件/移除思考过程||移除思考过程": {}
    }
  }
}